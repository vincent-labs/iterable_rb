=begin
#Iterable API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.8

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.32
=end

require 'spec_helper'
require 'json'

# Unit tests for Iterable::UsersApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'UsersApi' do
  before do
    # run before each test
    @instance = Iterable::UsersApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of UsersApi' do
    it 'should create an instance of UsersApi' do
      expect(@instance).to be_instance_of(Iterable::UsersApi)
    end
  end

  # unit tests for bulk_update_subscriptions
  # Bulk update user subscriptions
  # &lt;b&gt;WARNING&lt;/b&gt;: This will overwrite (instead of merging) existing data if the provided fields are not null.
  # @param body Bulk subscriptions to update
  # @param [Hash] opts the optional parameters
  # @return [BulkUpdateSubscriptionsResponse]
  describe 'bulk_update_subscriptions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for bulk_update_user
  # Bulk update user data
  # Bulk update user data. This will add the data if it doesn&#x27;t exist yet. Data will be merged; missing fields are not deleted. Changing emailListIds, unsubscribedChannelIds, messageTypeIds through this endpoint will &lt;b&gt;NOT&lt;/b&gt; generate unsubscribe events. However, the bulkUpdateSubscription will generate unsubscribe events. Also, note that there is a soft limit on the number of unique fields a user can have (default is 1,000). Types of data fields must match the types sent in previous requests, across all data fields in the project.&lt;br&gt;Note that bulk updates are processed separately from single-user calls (update, updateEmail, updateSubscriptions, etc). If the same user is modified using both bulk update and single-user calls made near the same time, the results may be inconsistent. It&#x27;s important to use either only single-user calls or only bulk update calls around the same time for any given user.&lt;br&gt;&lt;b&gt;Rate limit&lt;/b&gt;: 5 requests/second, per project.
  # @param body Users to update
  # @param [Hash] opts the optional parameters
  # @return [ListResponse]
  describe 'bulk_update_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete
  # Delete a user by email
  # Asynchronous. Delete a specific user by email address. &lt;b&gt;Rate limit&lt;/b&gt;: 3 requests/second, per project.
  # @param email email
  # @param [Hash] opts the optional parameters
  # @return [IterableApiResponse]
  describe 'delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_0
  # Delete user by userId
  # Asynchronous. Delete user by a userId. This will delete multiple users if they happen to share the same userId. &lt;b&gt;Rate limit&lt;/b&gt;: 3 requests/second, per project.
  # @param user_id 
  # @param [Hash] opts the optional parameters
  # @return [IterableApiResponse]
  describe 'delete_0 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for disable_device
  # Disable pushes to a mobile device
  # Manually disable push notifications to a device until it comes online again.
  # @param [Hash] opts the optional parameters
  # @option opts [DisableDeviceRequest] :body Request to disable device
  # @return [IterableApiResponse]
  describe 'disable_device test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_project_forgotten_users
  # Get hashed forgotten users in compliance with GDPR
  # Get all hashed user emails that are currently in the blacklist. In order to calculate the hash, every email is lowercased, trimmed and hashed using SHA-256.&lt;br&gt;&lt;b&gt;Rate limit&lt;/b&gt;: 3 requests/second, per project.
  # @param [Hash] opts the optional parameters
  # @return [GetForgottenUserEmailsResponse]
  describe 'export_project_forgotten_users test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for forget
  # Forget a user in compliance with GDPR
  # Delete the specified user&#x27;s data from the Iterable project and prevent future data collection about them.&lt;br&gt;&lt;b&gt;Rate limit&lt;/b&gt;: 3 requests/second, per project.
  # @param body user&#x27;s email to be added to blacklist.
  # @param [Hash] opts the optional parameters
  # @return [IterableApiResponse]
  describe 'forget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_sent_messages
  # Get messages sent to a user
  # Get messages sent to a user by email address or user ID. Returns 10 by default, up to 1,000. &lt;b&gt;Rate limit&lt;/b&gt;: 3 requests/second, per project.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :email user&#x27;s email, either email or userId must be specified
  # @option opts [String] :user_id user&#x27;s userId, either email or userId must be specified
  # @option opts [Integer] :limit max number of messages to return (default: 10, max limit: 1000)
  # @option opts [Array<Object>] :campaign_ids only include messages from these campaigns
  # @option opts [DateTime] :start_date_time start date time (yyyy-MM-dd HH:mm:ss ZZ)
  # @option opts [DateTime] :end_date_time end date time (yyyy-MM-dd HH:mm:ss ZZ)
  # @option opts [BOOLEAN] :exclude_blast_campaigns exclude results coming from blast campaigns (ignored if campaignId is set)
  # @option opts [String] :message_medium only include messages of this type
  # @return [GetSentMessagesResponse]
  describe 'get_sent_messages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user
  # Get a user by email
  # &lt;b&gt;Rate limit&lt;/b&gt;: 3 requests/second, per project.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :email 
  # @return [UserResponse]
  describe 'get_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_0
  # Get a user by email
  # Get a user by their email address.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: If the email address contains non-alphanumeric characters, please use the &lt;a href&#x3D;\&quot;https://api.iterable.com/api/docs#users_getUser_0\&quot;&gt;&lt;tt&gt;GET /api/users/getByEmail&lt;/tt&gt;&lt;/a&gt; endpoint instead.&lt;br&gt;&lt;b&gt;Rate limit&lt;/b&gt;: 3 requests/second, per project.
  # @param email email
  # @param [Hash] opts the optional parameters
  # @return [UserResponse]
  describe 'get_user_0 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_by_id
  # Get a user by userId
  # &lt;b&gt;Rate limit&lt;/b&gt;: 3 requests/second, per project.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user_id 
  # @return [UserResponse]
  describe 'get_user_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_by_id_0
  # Get a user by userId
  # Get a user by your custom userId. &lt;b&gt;Rate limit&lt;/b&gt;: 3 requests/second, per project.
  # @param user_id userId
  # @param [Hash] opts the optional parameters
  # @return [UserResponse]
  describe 'get_user_by_id_0 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_fields
  # Get all user fields
  # Get all user fields within a project. &lt;b&gt;Rate limit&lt;/b&gt;: 3 requests/second, per project.
  # @param [Hash] opts the optional parameters
  # @return [GetUserFieldsResponse]
  describe 'get_user_fields test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for invalidate_jwt
  # Invalidate all JWTs issued for a user
  # Invalidate all JWTs issued for a user before the current time or before the specified time.
  # @param body Invalid JWT request
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'invalidate_jwt test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for register_browser_token
  # Register a browser token for web push
  # There is a limit of 500 browser tokens per user profile. This API will return 400 error code if the user already has 500 tokens or more.
  # @param body Request to register browser
  # @param [Hash] opts the optional parameters
  # @return [IterableApiResponse]
  describe 'register_browser_token test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for register_device_token
  # Register a device token for push
  # Register a device token for push. This will add the data if it doesn&#x27;t exist yet. It will also update data fields on the device. Data will be merged; missing fields are not deleted. Also, note that there is a soft limit on the number of unique fields a user can have (default is 1,000). Types of data fields must match the types sent in previous requests, across all data fields in the project.&lt;br&gt;&lt;b&gt;Limits&lt;/b&gt;: There is a limit of 500 devices per user profile. This API will return 400 error code if the user already has 500 devices or more.&lt;br&gt;&lt;b&gt;Rate limit&lt;/b&gt;: 500 requests/second, per project.
  # @param body Request to register device
  # @param [Hash] opts the optional parameters
  # @return [IterableApiResponse]
  describe 'register_device_token test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for unforget
  # Unforget a user in compliance with GDPR
  # Allow the Iterable project to resume collecting data about a previously forgotten user. Deleted data cannot be recovered.&lt;br&gt;&lt;b&gt;Rate limit&lt;/b&gt;: 3 requests/second, per project.
  # @param body user&#x27;s email to be removed from blacklist.
  # @param [Hash] opts the optional parameters
  # @return [IterableApiResponse]
  describe 'unforget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_email
  # Update user email
  # Change a user&#x27;s email address. All profile data and events will be migrated to the new email address.
  # @param body Update a user&#x27;s email. All profile data and events will be migrated.
  # @param [Hash] opts the optional parameters
  # @return [IterableApiResponse]
  describe 'update_email test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_subscriptions
  # Update user subscriptions
  # Update user subscriptions. &lt;b&gt;NOTE&lt;/b&gt;: Overwrites existing data if the field is provided and not null.
  # @param body Subscriptions to update
  # @param [Hash] opts the optional parameters
  # @return [IterableApiResponse]
  describe 'update_subscriptions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_user
  # Update user data
  # Update user data or adds a user if none exists. Data is merged - missing fields are not deleted. Please note there is a soft limit (default: 1,000) on the number of unique fields users can have. Types of data fields must match the types sent in previous requests, across all data fields in the project.&lt;br&gt;&lt;b&gt;Rate limit&lt;/b&gt;: 500 requests/second, per project.
  # @param body user object
  # @param [Hash] opts the optional parameters
  # @return [IterableApiResponse]
  describe 'update_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
