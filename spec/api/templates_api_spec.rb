=begin
#Iterable API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.8

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.32
=end

require 'spec_helper'
require 'json'

# Unit tests for Iterable::TemplatesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'TemplatesApi' do
  before do
    # run before each test
    @instance = Iterable::TemplatesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TemplatesApi' do
    it 'should create an instance of TemplatesApi' do
      expect(@instance).to be_instance_of(Iterable::TemplatesApi)
    end
  end

  # unit tests for get_by_client_template_id
  # Get an email template by clientTemplateId
  # &lt;b&gt;Rate limit&lt;/b&gt;: 100 requests/second, per project.
  # @param client_template_id Client Template Id
  # @param [Hash] opts the optional parameters
  # @return [ClientTemplateIdResponse]
  describe 'get_by_client_template_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_template
  # Get an email template by templateId
  # &lt;b&gt;Rate limit&lt;/b&gt;: 100 requests/second, per project.
  # @param template_id Template ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :locale Locale of content to get
  # @return [ApiEmailTemplateModel]
  describe 'get_email_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_in_app_template
  # Get an in-app template
  # @param template_id Template ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :locale Locale of content to get
  # @return [ApiInAppTemplateModel]
  describe 'get_in_app_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_push_template
  # Get a push template
  # &lt;b&gt;Rate limit&lt;/b&gt;: 100 requests/second, per project.
  # @param template_id Template ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :locale Locale of content to get
  # @return [ApiPushTemplateModel]
  describe 'get_push_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_sms_template
  # Get an SMS template
  # &lt;b&gt;Rate limit&lt;/b&gt;: 100 requests/second, per project.
  # @param template_id Template ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :locale Locale of content to get
  # @return [ApiSMSTemplateModel]
  describe 'get_sms_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_templates
  # Get project templates
  # Get templates for a project. &lt;b&gt;Rate limit&lt;/b&gt;: 100 requests/second, per project.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :template_type Only retrieve templates associated with this template type
  # @option opts [String] :message_medium Only retrieve templates associated with this message medium
  # @option opts [DateTime] :start_date_time Get templates created at or after this date time (yyyy-MM-dd HH:mm:ss [ZZ])
  # @option opts [DateTime] :end_date_time Get templates created before this date time (yyyy-MM-dd HH:mm:ss [ZZ])
  # @return [GetTemplatesResponse]
  describe 'get_templates test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_email_template
  # Update email template
  # @param body Only the fields specified will be updated
  # @param [Hash] opts the optional parameters
  # @return [IterableApiResponse]
  describe 'update_email_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_in_app_template
  # Update in-app template
  # @param body Only the fields specified will be updated
  # @param [Hash] opts the optional parameters
  # @return [IterableApiResponse]
  describe 'update_in_app_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_push_template
  # Update push template
  # @param body Only the fields specified will be updated
  # @param [Hash] opts the optional parameters
  # @return [IterableApiResponse]
  describe 'update_push_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_sms_template
  # Update SMS template
  # @param body Only the fields specified will be updated
  # @param [Hash] opts the optional parameters
  # @return [IterableApiResponse]
  describe 'update_sms_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upsert_email_template
  # Create email template
  # Create email template if it doesn&#x27;t exist already, otherwise update all email templates which match the name provided.
  # @param body Only the fields specified will be updated
  # @param [Hash] opts the optional parameters
  # @return [IterableApiResponse]
  describe 'upsert_email_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upsert_in_app_template
  # Create an in-app template
  # Create an in-app template if it doesn&#x27;t exist yet, otherwise update all in-app templates which match the name provided.
  # @param body Only the fields specified will be updated
  # @param [Hash] opts the optional parameters
  # @return [IterableApiResponse]
  describe 'upsert_in_app_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upsert_push_template
  # Create a push template
  # Create a push template if it doesn&#x27;t exist, otherwise update all push templates which match the name provided.
  # @param body Only the fields specified will be updated
  # @param [Hash] opts the optional parameters
  # @return [IterableApiResponse]
  describe 'upsert_push_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upsert_sms_template
  # Create an SMS template
  # Create an SMS template if it doesn&#x27;t exist yet, otherwise update all SMS templates which match the name provided.
  # @param body Only the fields specified will be updated
  # @param [Hash] opts the optional parameters
  # @return [IterableApiResponse]
  describe 'upsert_sms_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
