=begin
#Iterable API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.8

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

require 'date'

module Iterable
  class CreateCampaignRequest
    attr_accessor :name

    attr_accessor :list_ids

    attr_accessor :template_id

    # Optional ids of lists of users that this campaign should not send emails to
    attr_accessor :suppression_list_ids

    # When to send the message up to 7 days in the future. If in the past, email is sent immediately. Format is YYYY-MM-DD HH:MM:SS in UTC
    attr_accessor :send_at

    # Send campaign based on project time zone or recipient time zone
    attr_accessor :send_mode

    # The starting time zone in for recipient time zone-based sends in IANA format (e.g. America/New_York, America/Los_Angeles, etc)
    attr_accessor :start_time_zone

    # The fallback time zone for recipient time zone-based sends if the recipient does not have time zone set in IANA format (e.g. America/New_York, America/Los_Angeles, etc)
    attr_accessor :default_time_zone

    # JSON object with additional data used to render data feed fields in specified template
    attr_accessor :data_fields

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'list_ids' => :'listIds',
        :'template_id' => :'templateId',
        :'suppression_list_ids' => :'suppressionListIds',
        :'send_at' => :'sendAt',
        :'send_mode' => :'sendMode',
        :'start_time_zone' => :'startTimeZone',
        :'default_time_zone' => :'defaultTimeZone',
        :'data_fields' => :'dataFields'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name' => :'Object',
        :'list_ids' => :'Object',
        :'template_id' => :'Object',
        :'suppression_list_ids' => :'Object',
        :'send_at' => :'Object',
        :'send_mode' => :'Object',
        :'start_time_zone' => :'Object',
        :'default_time_zone' => :'Object',
        :'data_fields' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Iterable::CreateCampaignRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Iterable::CreateCampaignRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'list_ids')
        if (value = attributes[:'list_ids']).is_a?(Array)
          self.list_ids = value
        end
      end

      if attributes.key?(:'template_id')
        self.template_id = attributes[:'template_id']
      end

      if attributes.key?(:'suppression_list_ids')
        if (value = attributes[:'suppression_list_ids']).is_a?(Array)
          self.suppression_list_ids = value
        end
      end

      if attributes.key?(:'send_at')
        self.send_at = attributes[:'send_at']
      end

      if attributes.key?(:'send_mode')
        self.send_mode = attributes[:'send_mode']
      end

      if attributes.key?(:'start_time_zone')
        self.start_time_zone = attributes[:'start_time_zone']
      end

      if attributes.key?(:'default_time_zone')
        self.default_time_zone = attributes[:'default_time_zone']
      end

      if attributes.key?(:'data_fields')
        self.data_fields = attributes[:'data_fields']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @list_ids.nil?
        invalid_properties.push('invalid value for "list_ids", list_ids cannot be nil.')
      end

      if @template_id.nil?
        invalid_properties.push('invalid value for "template_id", template_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      return false if @list_ids.nil?
      return false if @template_id.nil?
      send_mode_validator = EnumAttributeValidator.new('Object', ['ProjectTimeZone', 'RecipientTimeZone'])
      return false unless send_mode_validator.valid?(@send_mode)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] send_mode Object to be assigned
    def send_mode=(send_mode)
      validator = EnumAttributeValidator.new('Object', ['ProjectTimeZone', 'RecipientTimeZone'])
      unless validator.valid?(send_mode)
        fail ArgumentError, "invalid value for \"send_mode\", must be one of #{validator.allowable_values}."
      end
      @send_mode = send_mode
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          list_ids == o.list_ids &&
          template_id == o.template_id &&
          suppression_list_ids == o.suppression_list_ids &&
          send_at == o.send_at &&
          send_mode == o.send_mode &&
          start_time_zone == o.start_time_zone &&
          default_time_zone == o.default_time_zone &&
          data_fields == o.data_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, list_ids, template_id, suppression_list_ids, send_at, send_mode, start_time_zone, default_time_zone, data_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        Iterable.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
