=begin
#Iterable API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.8

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.32
=end

require 'date'

module Iterable
  class ApiInAppTemplateModel
    # In-app template ID
    attr_accessor :template_id

    # Name of the template
    attr_accessor :name

    # Html of the in-app notification
    attr_accessor :html

    attr_accessor :in_app_display_settings

    attr_accessor :web_in_app_display_settings

    # Payload
    attr_accessor :payload

    # The in-app message's absolute expiration time. If set to a time before the campaign sends, contacts will never see the message. Format is <code>YYYY-MM-DD HH:MM:SS</code> (UTC timestamp; time zones not allowed). If the request doesn't specify <code>expirationDateTime</code> or <code>expirationDuration</code>, the default expiration is 90 days after send time.
    attr_accessor :expiration_date_time

    # The in-app message's expiration time, relative to its send time. Should be an expression such as <code>now+90d</code>. For more information, read <a href=\"https://support.iterable.com/hc/en-us/articles/360034903151#_3-configure-the-in-app-template-tab\">this guide</a>. If the request doesn't specify <code>expirationDateTime</code> or <code>expirationDuration</code>, the default expiration is 90 days after send time.
    attr_accessor :expiration_duration

    # The locale for the content in this request. Leave empty for default locale. Iterable will automatically send the content with locale that matches a 'locale' field in the user profile.
    attr_accessor :locale

    # Client template Id. Used as a secondary key to reference the template
    attr_accessor :client_template_id

    # Message Type Id
    attr_accessor :message_type_id

    # Campaign ID
    attr_accessor :campaign_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'template_id' => :'templateId',
        :'name' => :'name',
        :'html' => :'html',
        :'in_app_display_settings' => :'inAppDisplaySettings',
        :'web_in_app_display_settings' => :'webInAppDisplaySettings',
        :'payload' => :'payload',
        :'expiration_date_time' => :'expirationDateTime',
        :'expiration_duration' => :'expirationDuration',
        :'locale' => :'locale',
        :'client_template_id' => :'clientTemplateId',
        :'message_type_id' => :'messageTypeId',
        :'campaign_id' => :'campaignId'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'template_id' => :'Object',
        :'name' => :'Object',
        :'html' => :'Object',
        :'in_app_display_settings' => :'Object',
        :'web_in_app_display_settings' => :'Object',
        :'payload' => :'Object',
        :'expiration_date_time' => :'Object',
        :'expiration_duration' => :'Object',
        :'locale' => :'Object',
        :'client_template_id' => :'Object',
        :'message_type_id' => :'Object',
        :'campaign_id' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Iterable::ApiInAppTemplateModel` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Iterable::ApiInAppTemplateModel`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'template_id')
        self.template_id = attributes[:'template_id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'html')
        self.html = attributes[:'html']
      end

      if attributes.key?(:'in_app_display_settings')
        self.in_app_display_settings = attributes[:'in_app_display_settings']
      end

      if attributes.key?(:'web_in_app_display_settings')
        self.web_in_app_display_settings = attributes[:'web_in_app_display_settings']
      end

      if attributes.key?(:'payload')
        self.payload = attributes[:'payload']
      end

      if attributes.key?(:'expiration_date_time')
        self.expiration_date_time = attributes[:'expiration_date_time']
      end

      if attributes.key?(:'expiration_duration')
        self.expiration_duration = attributes[:'expiration_duration']
      end

      if attributes.key?(:'locale')
        self.locale = attributes[:'locale']
      end

      if attributes.key?(:'client_template_id')
        self.client_template_id = attributes[:'client_template_id']
      end

      if attributes.key?(:'message_type_id')
        self.message_type_id = attributes[:'message_type_id']
      end

      if attributes.key?(:'campaign_id')
        self.campaign_id = attributes[:'campaign_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @template_id.nil?
        invalid_properties.push('invalid value for "template_id", template_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @template_id.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          template_id == o.template_id &&
          name == o.name &&
          html == o.html &&
          in_app_display_settings == o.in_app_display_settings &&
          web_in_app_display_settings == o.web_in_app_display_settings &&
          payload == o.payload &&
          expiration_date_time == o.expiration_date_time &&
          expiration_duration == o.expiration_duration &&
          locale == o.locale &&
          client_template_id == o.client_template_id &&
          message_type_id == o.message_type_id &&
          campaign_id == o.campaign_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [template_id, name, html, in_app_display_settings, web_in_app_display_settings, payload, expiration_date_time, expiration_duration, locale, client_template_id, message_type_id, campaign_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        Iterable.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
