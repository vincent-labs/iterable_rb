=begin
#Iterable API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.8

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

module Iterable
  class EmailApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancel an email to a user
    # Cancel an email to a specific user. Must include either an email address AND campaignId, or just a scheduledMessageId.
    # @param body Email and Campaign ID
    # @param [Hash] opts the optional parameters
    # @return [IterableApiResponse]
    def cancel(body, opts = {})
      data, _status_code, _headers = cancel_with_http_info(body, opts)
      data
    end

    # Cancel an email to a user
    # Cancel an email to a specific user. Must include either an email address AND campaignId, or just a scheduledMessageId.
    # @param body Email and Campaign ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IterableApiResponse, Integer, Hash)>] IterableApiResponse data, response status code and response headers
    def cancel_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailApi.cancel ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling EmailApi.cancel"
      end
      # resource path
      local_var_path = '/api/email/cancel'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'IterableApiResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Send an email to an email address
    # Send an email to a specific email address. Request data fields will override user profile data fields. A reference to the user profile is provided via the 'profile' field, to help resolve field collisions.
    # @param body Recipient and email id
    # @param [Hash] opts the optional parameters
    # @return [IterableApiResponse]
    def target(body, opts = {})
      data, _status_code, _headers = target_with_http_info(body, opts)
      data
    end

    # Send an email to an email address
    # Send an email to a specific email address. Request data fields will override user profile data fields. A reference to the user profile is provided via the &#x27;profile&#x27; field, to help resolve field collisions.
    # @param body Recipient and email id
    # @param [Hash] opts the optional parameters
    # @return [Array<(IterableApiResponse, Integer, Hash)>] IterableApiResponse data, response status code and response headers
    def target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailApi.target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling EmailApi.target"
      end
      # resource path
      local_var_path = '/api/email/target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'IterableApiResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # View a previously sent email
    # View a rendered version of a previously sent email. <b>Rate limit</b>: 100 requests/second, per project.
    # @param message_id id of sent message
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email user&#x27;s email
    # @option opts [String] :user_id user&#x27;s userId
    # @return [String]
    def view_in_browser(message_id, opts = {})
      data, _status_code, _headers = view_in_browser_with_http_info(message_id, opts)
      data
    end

    # View a previously sent email
    # View a rendered version of a previously sent email. &lt;b&gt;Rate limit&lt;/b&gt;: 100 requests/second, per project.
    # @param message_id id of sent message
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email user&#x27;s email
    # @option opts [String] :user_id user&#x27;s userId
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def view_in_browser_with_http_info(message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailApi.view_in_browser ...'
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling EmailApi.view_in_browser"
      end
      # resource path
      local_var_path = '/api/email/viewInBrowser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'messageId'] = message_id
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#view_in_browser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
