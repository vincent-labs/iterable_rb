=begin
#Iterable API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.8

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.32
=end

module Iterable
  class ExportApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Export data to CSV
    # Export campaign analytics data in CSV format. Use of either 'range' or 'startDateTime' and 'endDateTime' is required.<br/><b>Rate limit</b>: 4 requests/minute, per project.
    # @param data_type_name data type name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :range date range, uses UTC time (default to Today)
    # @option opts [String] :delimiter CSV filter delimiter (default to ,)
    # @option opts [String] :start_date_time Export starting from (&gt;&#x3D;) (yyyy-MM-dd HH:mm:ss [ZZ])
    # @option opts [String] :end_date_time Export ending at (&lt;) (yyyy-MM-dd HH:mm:ss [ZZ])
    # @option opts [String] :omit_fields Fields to omit (comma separated)
    # @option opts [Array<String>] :only_fields If non-empty, will only export these fields
    # @option opts [Integer] :campaign_id If provided, only export data from this campaign
    # @return [String]
    def export_data_csv(data_type_name, opts = {})
      data, _status_code, _headers = export_data_csv_with_http_info(data_type_name, opts)
      data
    end

    # Export data to CSV
    # Export campaign analytics data in CSV format. Use of either &#x27;range&#x27; or &#x27;startDateTime&#x27; and &#x27;endDateTime&#x27; is required.&lt;br/&gt;&lt;b&gt;Rate limit&lt;/b&gt;: 4 requests/minute, per project.
    # @param data_type_name data type name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :range date range, uses UTC time
    # @option opts [String] :delimiter CSV filter delimiter
    # @option opts [String] :start_date_time Export starting from (&gt;&#x3D;) (yyyy-MM-dd HH:mm:ss [ZZ])
    # @option opts [String] :end_date_time Export ending at (&lt;) (yyyy-MM-dd HH:mm:ss [ZZ])
    # @option opts [String] :omit_fields Fields to omit (comma separated)
    # @option opts [Array<String>] :only_fields If non-empty, will only export these fields
    # @option opts [Integer] :campaign_id If provided, only export data from this campaign
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def export_data_csv_with_http_info(data_type_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExportApi.export_data_csv ...'
      end
      # verify the required parameter 'data_type_name' is set
      if @api_client.config.client_side_validation && data_type_name.nil?
        fail ArgumentError, "Missing the required parameter 'data_type_name' when calling ExportApi.export_data_csv"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['emailSend', 'emailOpen', 'emailClick', 'hostedUnsubscribeClick', 'emailComplaint', 'emailBounce', 'emailSendSkip', 'pushSend', 'pushOpen', 'pushUninstall', 'pushBounce', 'pushSendSkip', 'inAppSend', 'inAppOpen', 'inAppClick', 'inAppClose', 'inAppDelete', 'inAppDelivery', 'inAppSendSkip', 'inboxSession', 'inboxMessageImpression', 'smsSend', 'smsBounce', 'smsClick', 'smsReceived', 'smsSendSkip', 'webPushSend', 'webPushClick', 'webPushSendSkip', 'emailSubscribe', 'emailUnSubscribe', 'purchase', 'customEvent', 'user'].include?(data_type_name)
        fail ArgumentError, "invalid value for 'data_type_name', must be one of emailSend, emailOpen, emailClick, hostedUnsubscribeClick, emailComplaint, emailBounce, emailSendSkip, pushSend, pushOpen, pushUninstall, pushBounce, pushSendSkip, inAppSend, inAppOpen, inAppClick, inAppClose, inAppDelete, inAppDelivery, inAppSendSkip, inboxSession, inboxMessageImpression, smsSend, smsBounce, smsClick, smsReceived, smsSendSkip, webPushSend, webPushClick, webPushSendSkip, emailSubscribe, emailUnSubscribe, purchase, customEvent, user"
      end
      if @api_client.config.client_side_validation && opts[:'range'] && !['Today', 'Yesterday', 'BeforeToday', 'All'].include?(opts[:'range'])
        fail ArgumentError, 'invalid value for "range", must be one of Today, Yesterday, BeforeToday, All'
      end
      # resource path
      local_var_path = '/api/export/data.csv'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'dataTypeName'] = data_type_name
      query_params[:'range'] = opts[:'range'] if !opts[:'range'].nil?
      query_params[:'delimiter'] = opts[:'delimiter'] if !opts[:'delimiter'].nil?
      query_params[:'startDateTime'] = opts[:'start_date_time'] if !opts[:'start_date_time'].nil?
      query_params[:'endDateTime'] = opts[:'end_date_time'] if !opts[:'end_date_time'].nil?
      query_params[:'omitFields'] = opts[:'omit_fields'] if !opts[:'omit_fields'].nil?
      query_params[:'onlyFields'] = @api_client.build_collection_param(opts[:'only_fields'], :multi) if !opts[:'only_fields'].nil?
      query_params[:'campaignId'] = opts[:'campaign_id'] if !opts[:'campaign_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExportApi#export_data_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Export data to JSON
    # Export campaign analytics data in JSON format, one entry per line. Use of either 'range' or 'startDateTime' and 'endDateTime' is required.<br/><b>Rate limit</b>: 4 requests/minute, per project.
    # @param data_type_name data type name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :range date range, uses UTC time (default to Today)
    # @option opts [String] :start_date_time export starting from (&amp;gt;&#x3D;) (yyyy-MM-dd HH:mm:ss [ZZ])
    # @option opts [String] :end_date_time export ending at (&amp;lt;) (yyyy-MM-dd HH:mm:ss [ZZ])
    # @option opts [String] :omit_fields fields to omit (comma separated)
    # @option opts [Array<String>] :only_fields if nonempty, will only export these fields
    # @option opts [Integer] :campaign_id if provided, only export data from this campaign
    # @return [String]
    def export_data_json(data_type_name, opts = {})
      data, _status_code, _headers = export_data_json_with_http_info(data_type_name, opts)
      data
    end

    # Export data to JSON
    # Export campaign analytics data in JSON format, one entry per line. Use of either &#x27;range&#x27; or &#x27;startDateTime&#x27; and &#x27;endDateTime&#x27; is required.&lt;br/&gt;&lt;b&gt;Rate limit&lt;/b&gt;: 4 requests/minute, per project.
    # @param data_type_name data type name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :range date range, uses UTC time
    # @option opts [String] :start_date_time export starting from (&amp;gt;&#x3D;) (yyyy-MM-dd HH:mm:ss [ZZ])
    # @option opts [String] :end_date_time export ending at (&amp;lt;) (yyyy-MM-dd HH:mm:ss [ZZ])
    # @option opts [String] :omit_fields fields to omit (comma separated)
    # @option opts [Array<String>] :only_fields if nonempty, will only export these fields
    # @option opts [Integer] :campaign_id if provided, only export data from this campaign
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def export_data_json_with_http_info(data_type_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExportApi.export_data_json ...'
      end
      # verify the required parameter 'data_type_name' is set
      if @api_client.config.client_side_validation && data_type_name.nil?
        fail ArgumentError, "Missing the required parameter 'data_type_name' when calling ExportApi.export_data_json"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['emailSend', 'emailOpen', 'emailClick', 'hostedUnsubscribeClick', 'emailComplaint', 'emailBounce', 'emailSendSkip', 'pushSend', 'pushOpen', 'pushUninstall', 'pushBounce', 'pushSendSkip', 'inAppSend', 'inAppOpen', 'inAppClick', 'inAppClose', 'inAppDelete', 'inAppDelivery', 'inAppSendSkip', 'inboxSession', 'inboxMessageImpression', 'smsSend', 'smsBounce', 'smsClick', 'smsReceived', 'smsSendSkip', 'webPushSend', 'webPushClick', 'webPushSendSkip', 'emailSubscribe', 'emailUnSubscribe', 'purchase', 'customEvent', 'user'].include?(data_type_name)
        fail ArgumentError, "invalid value for 'data_type_name', must be one of emailSend, emailOpen, emailClick, hostedUnsubscribeClick, emailComplaint, emailBounce, emailSendSkip, pushSend, pushOpen, pushUninstall, pushBounce, pushSendSkip, inAppSend, inAppOpen, inAppClick, inAppClose, inAppDelete, inAppDelivery, inAppSendSkip, inboxSession, inboxMessageImpression, smsSend, smsBounce, smsClick, smsReceived, smsSendSkip, webPushSend, webPushClick, webPushSendSkip, emailSubscribe, emailUnSubscribe, purchase, customEvent, user"
      end
      if @api_client.config.client_side_validation && opts[:'range'] && !['Today', 'Yesterday', 'BeforeToday', 'All'].include?(opts[:'range'])
        fail ArgumentError, 'invalid value for "range", must be one of Today, Yesterday, BeforeToday, All'
      end
      # resource path
      local_var_path = '/api/export/data.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'dataTypeName'] = data_type_name
      query_params[:'range'] = opts[:'range'] if !opts[:'range'].nil?
      query_params[:'startDateTime'] = opts[:'start_date_time'] if !opts[:'start_date_time'].nil?
      query_params[:'endDateTime'] = opts[:'end_date_time'] if !opts[:'end_date_time'].nil?
      query_params[:'omitFields'] = opts[:'omit_fields'] if !opts[:'omit_fields'].nil?
      query_params[:'onlyFields'] = @api_client.build_collection_param(opts[:'only_fields'], :multi) if !opts[:'only_fields'].nil?
      query_params[:'campaignId'] = opts[:'campaign_id'] if !opts[:'campaign_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/x-json-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExportApi#export_data_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Export user events
    # Export all events in JSON format for a user. One event per line.
    # @param email email
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_custom_events Include Custom Events (default to false)
    # @return [String]
    def export_user_events(email, opts = {})
      data, _status_code, _headers = export_user_events_with_http_info(email, opts)
      data
    end

    # Export user events
    # Export all events in JSON format for a user. One event per line.
    # @param email email
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_custom_events Include Custom Events
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def export_user_events_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExportApi.export_user_events ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling ExportApi.export_user_events"
      end
      # resource path
      local_var_path = '/api/export/userEvents'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'email'] = email
      query_params[:'includeCustomEvents'] = opts[:'include_custom_events'] if !opts[:'include_custom_events'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/x-json-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExportApi#export_user_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
