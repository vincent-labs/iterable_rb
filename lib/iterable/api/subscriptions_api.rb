=begin
#Iterable API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.8

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.32
=end

module Iterable
  class SubscriptionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Bulk subscription action on a list of users
    # Update a subscription group for a bulk number of users. All users will have the same event on the given subscriptionGroup. To enable this API, please contact your CSM.
    # @param body user email
    # @param action subscribe or unsubscribe
    # @param subscription_group Subscription group (i.e.: emailList, messageType, messageChannel) [Alphanumeric, case insensitive]
    # @param subscription_group_id Subscription Group Id [Numeric]
    # @param [Hash] opts the optional parameters
    # @return [IterableApiResponse]
    def bulk_subscription_action(body, action, subscription_group, subscription_group_id, opts = {})
      data, _status_code, _headers = bulk_subscription_action_with_http_info(body, action, subscription_group, subscription_group_id, opts)
      data
    end

    # Bulk subscription action on a list of users
    # Update a subscription group for a bulk number of users. All users will have the same event on the given subscriptionGroup. To enable this API, please contact your CSM.
    # @param body user email
    # @param action subscribe or unsubscribe
    # @param subscription_group Subscription group (i.e.: emailList, messageType, messageChannel) [Alphanumeric, case insensitive]
    # @param subscription_group_id Subscription Group Id [Numeric]
    # @param [Hash] opts the optional parameters
    # @return [Array<(IterableApiResponse, Integer, Hash)>] IterableApiResponse data, response status code and response headers
    def bulk_subscription_action_with_http_info(body, action, subscription_group, subscription_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.bulk_subscription_action ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SubscriptionsApi.bulk_subscription_action"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling SubscriptionsApi.bulk_subscription_action"
      end
      # verify the required parameter 'subscription_group' is set
      if @api_client.config.client_side_validation && subscription_group.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_group' when calling SubscriptionsApi.bulk_subscription_action"
      end
      # verify the required parameter 'subscription_group_id' is set
      if @api_client.config.client_side_validation && subscription_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_group_id' when calling SubscriptionsApi.bulk_subscription_action"
      end
      # resource path
      local_var_path = '/api/subscriptions/{subscriptionGroup}/{subscriptionGroupId}'.sub('{' + 'subscriptionGroup' + '}', subscription_group.to_s).sub('{' + 'subscriptionGroupId' + '}', subscription_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'action'] = action

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'IterableApiResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#bulk_subscription_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Subscribe a single user
    # Updates a user to be subscribed to the provided subscription group entity. <br>To enable this API, please contact your CSM.
    # @param subscription_group Subscription group (i.e.: emailList, messageType, messageChannel) [Alphanumeric, case insensitive]
    # @param subscription_group_id Subscription Group Id [Numeric]
    # @param user_email User&#x27;s Email [Alphanumeric]
    # @param [Hash] opts the optional parameters
    # @return [IterableApiResponse]
    def subscribe_single_user(subscription_group, subscription_group_id, user_email, opts = {})
      data, _status_code, _headers = subscribe_single_user_with_http_info(subscription_group, subscription_group_id, user_email, opts)
      data
    end

    # Subscribe a single user
    # Updates a user to be subscribed to the provided subscription group entity. &lt;br&gt;To enable this API, please contact your CSM.
    # @param subscription_group Subscription group (i.e.: emailList, messageType, messageChannel) [Alphanumeric, case insensitive]
    # @param subscription_group_id Subscription Group Id [Numeric]
    # @param user_email User&#x27;s Email [Alphanumeric]
    # @param [Hash] opts the optional parameters
    # @return [Array<(IterableApiResponse, Integer, Hash)>] IterableApiResponse data, response status code and response headers
    def subscribe_single_user_with_http_info(subscription_group, subscription_group_id, user_email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.subscribe_single_user ...'
      end
      # verify the required parameter 'subscription_group' is set
      if @api_client.config.client_side_validation && subscription_group.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_group' when calling SubscriptionsApi.subscribe_single_user"
      end
      # verify the required parameter 'subscription_group_id' is set
      if @api_client.config.client_side_validation && subscription_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_group_id' when calling SubscriptionsApi.subscribe_single_user"
      end
      # verify the required parameter 'user_email' is set
      if @api_client.config.client_side_validation && user_email.nil?
        fail ArgumentError, "Missing the required parameter 'user_email' when calling SubscriptionsApi.subscribe_single_user"
      end
      # resource path
      local_var_path = '/api/subscriptions/{subscriptionGroup}/{subscriptionGroupId}/user/{userEmail}'.sub('{' + 'subscriptionGroup' + '}', subscription_group.to_s).sub('{' + 'subscriptionGroupId' + '}', subscription_group_id.to_s).sub('{' + 'userEmail' + '}', user_email.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'IterableApiResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#subscribe_single_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Subscribe a single user by their userId
    # Updates a user to be subscribed to the provided subscription group entity. <br>To enable this API, please contact your CSM.
    # @param subscription_group Subscription group (i.e.: emailList, messageType, messageChannel) [Alphanumeric, case insensitive]
    # @param subscription_group_id Subscription Group Id [Numeric]
    # @param user_id User&#x27;s userId
    # @param [Hash] opts the optional parameters
    # @return [IterableApiResponse]
    def subscribe_single_user_by_user_id(subscription_group, subscription_group_id, user_id, opts = {})
      data, _status_code, _headers = subscribe_single_user_by_user_id_with_http_info(subscription_group, subscription_group_id, user_id, opts)
      data
    end

    # Subscribe a single user by their userId
    # Updates a user to be subscribed to the provided subscription group entity. &lt;br&gt;To enable this API, please contact your CSM.
    # @param subscription_group Subscription group (i.e.: emailList, messageType, messageChannel) [Alphanumeric, case insensitive]
    # @param subscription_group_id Subscription Group Id [Numeric]
    # @param user_id User&#x27;s userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(IterableApiResponse, Integer, Hash)>] IterableApiResponse data, response status code and response headers
    def subscribe_single_user_by_user_id_with_http_info(subscription_group, subscription_group_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.subscribe_single_user_by_user_id ...'
      end
      # verify the required parameter 'subscription_group' is set
      if @api_client.config.client_side_validation && subscription_group.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_group' when calling SubscriptionsApi.subscribe_single_user_by_user_id"
      end
      # verify the required parameter 'subscription_group_id' is set
      if @api_client.config.client_side_validation && subscription_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_group_id' when calling SubscriptionsApi.subscribe_single_user_by_user_id"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SubscriptionsApi.subscribe_single_user_by_user_id"
      end
      # resource path
      local_var_path = '/api/subscriptions/{subscriptionGroup}/{subscriptionGroupId}/byUserId/{userId}'.sub('{' + 'subscriptionGroup' + '}', subscription_group.to_s).sub('{' + 'subscriptionGroupId' + '}', subscription_group_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'IterableApiResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#subscribe_single_user_by_user_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Unsubscribe a single user
    # Updates a user to be unsubscribed to the provided subscription group entity. <br>To enable this API, please contact your CSM.
    # @param subscription_group Subscription group (i.e.: emailList, messageType, messageChannel) [Alphanumeric, case insensitive]
    # @param subscription_group_id Subscription Group Id [Numeric]
    # @param user_email User&#x27;s Email [Alphanumeric]
    # @param [Hash] opts the optional parameters
    # @return [IterableApiResponse]
    def unsubscribe_single_user(subscription_group, subscription_group_id, user_email, opts = {})
      data, _status_code, _headers = unsubscribe_single_user_with_http_info(subscription_group, subscription_group_id, user_email, opts)
      data
    end

    # Unsubscribe a single user
    # Updates a user to be unsubscribed to the provided subscription group entity. &lt;br&gt;To enable this API, please contact your CSM.
    # @param subscription_group Subscription group (i.e.: emailList, messageType, messageChannel) [Alphanumeric, case insensitive]
    # @param subscription_group_id Subscription Group Id [Numeric]
    # @param user_email User&#x27;s Email [Alphanumeric]
    # @param [Hash] opts the optional parameters
    # @return [Array<(IterableApiResponse, Integer, Hash)>] IterableApiResponse data, response status code and response headers
    def unsubscribe_single_user_with_http_info(subscription_group, subscription_group_id, user_email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.unsubscribe_single_user ...'
      end
      # verify the required parameter 'subscription_group' is set
      if @api_client.config.client_side_validation && subscription_group.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_group' when calling SubscriptionsApi.unsubscribe_single_user"
      end
      # verify the required parameter 'subscription_group_id' is set
      if @api_client.config.client_side_validation && subscription_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_group_id' when calling SubscriptionsApi.unsubscribe_single_user"
      end
      # verify the required parameter 'user_email' is set
      if @api_client.config.client_side_validation && user_email.nil?
        fail ArgumentError, "Missing the required parameter 'user_email' when calling SubscriptionsApi.unsubscribe_single_user"
      end
      # resource path
      local_var_path = '/api/subscriptions/{subscriptionGroup}/{subscriptionGroupId}/user/{userEmail}'.sub('{' + 'subscriptionGroup' + '}', subscription_group.to_s).sub('{' + 'subscriptionGroupId' + '}', subscription_group_id.to_s).sub('{' + 'userEmail' + '}', user_email.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'IterableApiResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#unsubscribe_single_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Unsubscribe a single user by userId
    # Updates a user to be unsubscribed to the provided subscription group entity. <br>To enable this API, please contact your CSM.
    # @param subscription_group Subscription group (i.e.: emailList, messageType, messageChannel) [Alphanumeric, case insensitive]
    # @param subscription_group_id Subscription Group Id [Numeric]
    # @param user_id User&#x27;s userId
    # @param [Hash] opts the optional parameters
    # @return [IterableApiResponse]
    def unsubscribe_single_user_by_user_id(subscription_group, subscription_group_id, user_id, opts = {})
      data, _status_code, _headers = unsubscribe_single_user_by_user_id_with_http_info(subscription_group, subscription_group_id, user_id, opts)
      data
    end

    # Unsubscribe a single user by userId
    # Updates a user to be unsubscribed to the provided subscription group entity. &lt;br&gt;To enable this API, please contact your CSM.
    # @param subscription_group Subscription group (i.e.: emailList, messageType, messageChannel) [Alphanumeric, case insensitive]
    # @param subscription_group_id Subscription Group Id [Numeric]
    # @param user_id User&#x27;s userId
    # @param [Hash] opts the optional parameters
    # @return [Array<(IterableApiResponse, Integer, Hash)>] IterableApiResponse data, response status code and response headers
    def unsubscribe_single_user_by_user_id_with_http_info(subscription_group, subscription_group_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.unsubscribe_single_user_by_user_id ...'
      end
      # verify the required parameter 'subscription_group' is set
      if @api_client.config.client_side_validation && subscription_group.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_group' when calling SubscriptionsApi.unsubscribe_single_user_by_user_id"
      end
      # verify the required parameter 'subscription_group_id' is set
      if @api_client.config.client_side_validation && subscription_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_group_id' when calling SubscriptionsApi.unsubscribe_single_user_by_user_id"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SubscriptionsApi.unsubscribe_single_user_by_user_id"
      end
      # resource path
      local_var_path = '/api/subscriptions/{subscriptionGroup}/{subscriptionGroupId}/byUserId/{userId}'.sub('{' + 'subscriptionGroup' + '}', subscription_group.to_s).sub('{' + 'subscriptionGroupId' + '}', subscription_group_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'IterableApiResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#unsubscribe_single_user_by_user_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
