=begin
#Iterable API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.8

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.32
=end

module Iterable
  class CatalogsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Bulk delete catalog items
    # Asynchronous. Delete the specified catalog items from the catalog.
    # @param body Catalog bulk delete request
    # @param catalog_name Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]
    # @param [Hash] opts the optional parameters
    # @return [IterableApiResponse]
    def bulk_delete_catalog_items(body, catalog_name, opts = {})
      data, _status_code, _headers = bulk_delete_catalog_items_with_http_info(body, catalog_name, opts)
      data
    end

    # Bulk delete catalog items
    # Asynchronous. Delete the specified catalog items from the catalog.
    # @param body Catalog bulk delete request
    # @param catalog_name Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]
    # @param [Hash] opts the optional parameters
    # @return [Array<(IterableApiResponse, Integer, Hash)>] IterableApiResponse data, response status code and response headers
    def bulk_delete_catalog_items_with_http_info(body, catalog_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatalogsApi.bulk_delete_catalog_items ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CatalogsApi.bulk_delete_catalog_items"
      end
      # verify the required parameter 'catalog_name' is set
      if @api_client.config.client_side_validation && catalog_name.nil?
        fail ArgumentError, "Missing the required parameter 'catalog_name' when calling CatalogsApi.bulk_delete_catalog_items"
      end
      # resource path
      local_var_path = '/api/catalogs/{catalogName}/items'.sub('{' + 'catalogName' + '}', catalog_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'IterableApiResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsApi#bulk_delete_catalog_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Bulk create catalog items
    # Asynchronous. Create up to 1000 catalog items with a single request. Each of a catalog's items must have a unique ID that contains only alphanumeric characters and dashes and has a maximum length of 255 characters. If the catalog already contains an item with the same ID as one provided in the request body, the item in the catalog will be completely overwritten, unless replaceUploadedFieldsOnly is set to true. Do not use periods in field names.
    # @param body Catalog bulk update request
    # @param catalog_name Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]
    # @param [Hash] opts the optional parameters
    # @return [IterableApiResponse]
    def bulk_update_catalog_items(body, catalog_name, opts = {})
      data, _status_code, _headers = bulk_update_catalog_items_with_http_info(body, catalog_name, opts)
      data
    end

    # Bulk create catalog items
    # Asynchronous. Create up to 1000 catalog items with a single request. Each of a catalog&#x27;s items must have a unique ID that contains only alphanumeric characters and dashes and has a maximum length of 255 characters. If the catalog already contains an item with the same ID as one provided in the request body, the item in the catalog will be completely overwritten, unless replaceUploadedFieldsOnly is set to true. Do not use periods in field names.
    # @param body Catalog bulk update request
    # @param catalog_name Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]
    # @param [Hash] opts the optional parameters
    # @return [Array<(IterableApiResponse, Integer, Hash)>] IterableApiResponse data, response status code and response headers
    def bulk_update_catalog_items_with_http_info(body, catalog_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatalogsApi.bulk_update_catalog_items ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CatalogsApi.bulk_update_catalog_items"
      end
      # verify the required parameter 'catalog_name' is set
      if @api_client.config.client_side_validation && catalog_name.nil?
        fail ArgumentError, "Missing the required parameter 'catalog_name' when calling CatalogsApi.bulk_update_catalog_items"
      end
      # resource path
      local_var_path = '/api/catalogs/{catalogName}/items'.sub('{' + 'catalogName' + '}', catalog_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'IterableApiResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsApi#bulk_update_catalog_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a catalog
    # Create a catalog. Each catalog in a project must have a unique name. Catalog names can be no longer than 255 characters and must contain only alphanumeric characters and dashes.
    # @param catalog_name Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]
    # @param [Hash] opts the optional parameters
    # @return [IterableApiResponse]
    def create_catalog(catalog_name, opts = {})
      data, _status_code, _headers = create_catalog_with_http_info(catalog_name, opts)
      data
    end

    # Create a catalog
    # Create a catalog. Each catalog in a project must have a unique name. Catalog names can be no longer than 255 characters and must contain only alphanumeric characters and dashes.
    # @param catalog_name Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]
    # @param [Hash] opts the optional parameters
    # @return [Array<(IterableApiResponse, Integer, Hash)>] IterableApiResponse data, response status code and response headers
    def create_catalog_with_http_info(catalog_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatalogsApi.create_catalog ...'
      end
      # verify the required parameter 'catalog_name' is set
      if @api_client.config.client_side_validation && catalog_name.nil?
        fail ArgumentError, "Missing the required parameter 'catalog_name' when calling CatalogsApi.create_catalog"
      end
      # resource path
      local_var_path = '/api/catalogs/{catalogName}'.sub('{' + 'catalogName' + '}', catalog_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'IterableApiResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsApi#create_catalog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a catalog
    # Delete the catalog with the specified name.
    # @param catalog_name Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]
    # @param [Hash] opts the optional parameters
    # @return [IterableApiResponse]
    def delete_catalog(catalog_name, opts = {})
      data, _status_code, _headers = delete_catalog_with_http_info(catalog_name, opts)
      data
    end

    # Delete a catalog
    # Delete the catalog with the specified name.
    # @param catalog_name Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]
    # @param [Hash] opts the optional parameters
    # @return [Array<(IterableApiResponse, Integer, Hash)>] IterableApiResponse data, response status code and response headers
    def delete_catalog_with_http_info(catalog_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatalogsApi.delete_catalog ...'
      end
      # verify the required parameter 'catalog_name' is set
      if @api_client.config.client_side_validation && catalog_name.nil?
        fail ArgumentError, "Missing the required parameter 'catalog_name' when calling CatalogsApi.delete_catalog"
      end
      # resource path
      local_var_path = '/api/catalogs/{catalogName}'.sub('{' + 'catalogName' + '}', catalog_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'IterableApiResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsApi#delete_catalog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a catalog item
    # Asynchronous. Deletes the specified item from the catalog. Data may not be deleted immediately.
    # @param catalog_name Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]
    # @param item_id Catalog item id [Alphanumeric, dashes, case sensitive, 255 characters max]
    # @param [Hash] opts the optional parameters
    # @return [IterableApiResponse]
    def delete_catalog_item(catalog_name, item_id, opts = {})
      data, _status_code, _headers = delete_catalog_item_with_http_info(catalog_name, item_id, opts)
      data
    end

    # Delete a catalog item
    # Asynchronous. Deletes the specified item from the catalog. Data may not be deleted immediately.
    # @param catalog_name Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]
    # @param item_id Catalog item id [Alphanumeric, dashes, case sensitive, 255 characters max]
    # @param [Hash] opts the optional parameters
    # @return [Array<(IterableApiResponse, Integer, Hash)>] IterableApiResponse data, response status code and response headers
    def delete_catalog_item_with_http_info(catalog_name, item_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatalogsApi.delete_catalog_item ...'
      end
      # verify the required parameter 'catalog_name' is set
      if @api_client.config.client_side_validation && catalog_name.nil?
        fail ArgumentError, "Missing the required parameter 'catalog_name' when calling CatalogsApi.delete_catalog_item"
      end
      # verify the required parameter 'item_id' is set
      if @api_client.config.client_side_validation && item_id.nil?
        fail ArgumentError, "Missing the required parameter 'item_id' when calling CatalogsApi.delete_catalog_item"
      end
      # resource path
      local_var_path = '/api/catalogs/{catalogName}/items/{itemId}'.sub('{' + 'catalogName' + '}', catalog_name.to_s).sub('{' + 'itemId' + '}', item_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'IterableApiResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsApi#delete_catalog_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific catalog item
    # Get a specific catalog item from the given catalog.
    # @param catalog_name Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]
    # @param item_id Catalog item id [Alphanumeric, dashes, case sensitive, 255 characters max]
    # @param [Hash] opts the optional parameters
    # @return [CatalogItemWithProperties]
    def get_catalog_item(catalog_name, item_id, opts = {})
      data, _status_code, _headers = get_catalog_item_with_http_info(catalog_name, item_id, opts)
      data
    end

    # Get a specific catalog item
    # Get a specific catalog item from the given catalog.
    # @param catalog_name Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]
    # @param item_id Catalog item id [Alphanumeric, dashes, case sensitive, 255 characters max]
    # @param [Hash] opts the optional parameters
    # @return [Array<(CatalogItemWithProperties, Integer, Hash)>] CatalogItemWithProperties data, response status code and response headers
    def get_catalog_item_with_http_info(catalog_name, item_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatalogsApi.get_catalog_item ...'
      end
      # verify the required parameter 'catalog_name' is set
      if @api_client.config.client_side_validation && catalog_name.nil?
        fail ArgumentError, "Missing the required parameter 'catalog_name' when calling CatalogsApi.get_catalog_item"
      end
      # verify the required parameter 'item_id' is set
      if @api_client.config.client_side_validation && item_id.nil?
        fail ArgumentError, "Missing the required parameter 'item_id' when calling CatalogsApi.get_catalog_item"
      end
      # resource path
      local_var_path = '/api/catalogs/{catalogName}/items/{itemId}'.sub('{' + 'catalogName' + '}', catalog_name.to_s).sub('{' + 'itemId' + '}', item_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'CatalogItemWithProperties' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsApi#get_catalog_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get field mappings for a catalog
    # Field mappings (field to data types) and undefined fields of a catalog
    # @param catalog_name Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]
    # @param [Hash] opts the optional parameters
    # @return [CatalogFieldMappingsResponse]
    def get_field_mappings(catalog_name, opts = {})
      data, _status_code, _headers = get_field_mappings_with_http_info(catalog_name, opts)
      data
    end

    # Get field mappings for a catalog
    # Field mappings (field to data types) and undefined fields of a catalog
    # @param catalog_name Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]
    # @param [Hash] opts the optional parameters
    # @return [Array<(CatalogFieldMappingsResponse, Integer, Hash)>] CatalogFieldMappingsResponse data, response status code and response headers
    def get_field_mappings_with_http_info(catalog_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatalogsApi.get_field_mappings ...'
      end
      # verify the required parameter 'catalog_name' is set
      if @api_client.config.client_side_validation && catalog_name.nil?
        fail ArgumentError, "Missing the required parameter 'catalog_name' when calling CatalogsApi.get_field_mappings"
      end
      # resource path
      local_var_path = '/api/catalogs/{catalogName}/fieldMappings'.sub('{' + 'catalogName' + '}', catalog_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'CatalogFieldMappingsResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsApi#get_field_mappings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or replace a catalog item
    # Asynchronous. Create or replace the specified catalog item in the given catalog. A catalog item's ID must be unique, contain only alphanumeric characters and dashes, and have a maximum length of 255 characters. If the catalog item already exists, it will be replaced by the value provided in the request body. Do not use periods in field names.
    # @param body Catalog item value
    # @param catalog_name Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]
    # @param item_id Catalog item id [Alphanumeric, dashes, case sensitive, 255 characters max]
    # @param [Hash] opts the optional parameters
    # @return [IterableApiResponse]
    def index_catalog_item(body, catalog_name, item_id, opts = {})
      data, _status_code, _headers = index_catalog_item_with_http_info(body, catalog_name, item_id, opts)
      data
    end

    # Create or replace a catalog item
    # Asynchronous. Create or replace the specified catalog item in the given catalog. A catalog item&#x27;s ID must be unique, contain only alphanumeric characters and dashes, and have a maximum length of 255 characters. If the catalog item already exists, it will be replaced by the value provided in the request body. Do not use periods in field names.
    # @param body Catalog item value
    # @param catalog_name Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]
    # @param item_id Catalog item id [Alphanumeric, dashes, case sensitive, 255 characters max]
    # @param [Hash] opts the optional parameters
    # @return [Array<(IterableApiResponse, Integer, Hash)>] IterableApiResponse data, response status code and response headers
    def index_catalog_item_with_http_info(body, catalog_name, item_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatalogsApi.index_catalog_item ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CatalogsApi.index_catalog_item"
      end
      # verify the required parameter 'catalog_name' is set
      if @api_client.config.client_side_validation && catalog_name.nil?
        fail ArgumentError, "Missing the required parameter 'catalog_name' when calling CatalogsApi.index_catalog_item"
      end
      # verify the required parameter 'item_id' is set
      if @api_client.config.client_side_validation && item_id.nil?
        fail ArgumentError, "Missing the required parameter 'item_id' when calling CatalogsApi.index_catalog_item"
      end
      # resource path
      local_var_path = '/api/catalogs/{catalogName}/items/{itemId}'.sub('{' + 'catalogName' + '}', catalog_name.to_s).sub('{' + 'itemId' + '}', item_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'IterableApiResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsApi#index_catalog_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the catalog items for a catalog
    # @param catalog_name Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to list (starting at 1).
    # @option opts [Integer] :page_size Number of results to display per page (defaults to 10).
    # @option opts [String] :order_by Field by which results should be ordered. To also use the sortAscending parameter, this field must have a defined type.
    # @option opts [BOOLEAN] :sort_ascending Sort results by ascending (Defaults to false).
    # @return [GetCatalogItemsResponse]
    def list_catalog_items(catalog_name, opts = {})
      data, _status_code, _headers = list_catalog_items_with_http_info(catalog_name, opts)
      data
    end

    # Get the catalog items for a catalog
    # @param catalog_name Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to list (starting at 1).
    # @option opts [Integer] :page_size Number of results to display per page (defaults to 10).
    # @option opts [String] :order_by Field by which results should be ordered. To also use the sortAscending parameter, this field must have a defined type.
    # @option opts [BOOLEAN] :sort_ascending Sort results by ascending (Defaults to false).
    # @return [Array<(GetCatalogItemsResponse, Integer, Hash)>] GetCatalogItemsResponse data, response status code and response headers
    def list_catalog_items_with_http_info(catalog_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatalogsApi.list_catalog_items ...'
      end
      # verify the required parameter 'catalog_name' is set
      if @api_client.config.client_side_validation && catalog_name.nil?
        fail ArgumentError, "Missing the required parameter 'catalog_name' when calling CatalogsApi.list_catalog_items"
      end
      # resource path
      local_var_path = '/api/catalogs/{catalogName}/items'.sub('{' + 'catalogName' + '}', catalog_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'sortAscending'] = opts[:'sort_ascending'] if !opts[:'sort_ascending'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GetCatalogItemsResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsApi#list_catalog_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get catalog names
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to list (starting at 1).
    # @option opts [Integer] :page_size Number of results to display per page (defaults to 10).
    # @return [GetCatalogsResponse]
    def list_catalogs(opts = {})
      data, _status_code, _headers = list_catalogs_with_http_info(opts)
      data
    end

    # Get catalog names
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to list (starting at 1).
    # @option opts [Integer] :page_size Number of results to display per page (defaults to 10).
    # @return [Array<(GetCatalogsResponse, Integer, Hash)>] GetCatalogsResponse data, response status code and response headers
    def list_catalogs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatalogsApi.list_catalogs ...'
      end
      # resource path
      local_var_path = '/api/catalogs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GetCatalogsResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsApi#list_catalogs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or update a catalog item
    # Asynchronous. Create or update the specified catalog item in the given catalog. A catalog item's ID must be unique, contain only alphanumeric characters and dashes, and have a maximum length of 255 characters. If the catalog item already exists, its fields will be updated with the values provided in the request body. Previously existing fields not included in the request body will remain as is. Do not use periods in field names.
    # @param body Catalog item contents
    # @param catalog_name 
    # @param item_id 
    # @param [Hash] opts the optional parameters
    # @return [IterableApiResponse]
    def partial_update_catalog_item(body, catalog_name, item_id, opts = {})
      data, _status_code, _headers = partial_update_catalog_item_with_http_info(body, catalog_name, item_id, opts)
      data
    end

    # Create or update a catalog item
    # Asynchronous. Create or update the specified catalog item in the given catalog. A catalog item&#x27;s ID must be unique, contain only alphanumeric characters and dashes, and have a maximum length of 255 characters. If the catalog item already exists, its fields will be updated with the values provided in the request body. Previously existing fields not included in the request body will remain as is. Do not use periods in field names.
    # @param body Catalog item contents
    # @param catalog_name 
    # @param item_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IterableApiResponse, Integer, Hash)>] IterableApiResponse data, response status code and response headers
    def partial_update_catalog_item_with_http_info(body, catalog_name, item_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatalogsApi.partial_update_catalog_item ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CatalogsApi.partial_update_catalog_item"
      end
      # verify the required parameter 'catalog_name' is set
      if @api_client.config.client_side_validation && catalog_name.nil?
        fail ArgumentError, "Missing the required parameter 'catalog_name' when calling CatalogsApi.partial_update_catalog_item"
      end
      # verify the required parameter 'item_id' is set
      if @api_client.config.client_side_validation && item_id.nil?
        fail ArgumentError, "Missing the required parameter 'item_id' when calling CatalogsApi.partial_update_catalog_item"
      end
      # resource path
      local_var_path = '/api/catalogs/{catalogName}/items/{itemId}'.sub('{' + 'catalogName' + '}', catalog_name.to_s).sub('{' + 'itemId' + '}', item_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'IterableApiResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsApi#partial_update_catalog_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set a catalog's field mappings (data types)
    # Set a catalog's field mappings (data types). After being set, a given field's data type may not be changed. Valid types: boolean, date, geo_location, long, double, object, and string.
    # @param body Catalog Field Types
    # @param catalog_name Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_field_types(body, catalog_name, opts = {})
      update_field_types_with_http_info(body, catalog_name, opts)
      nil
    end

    # Set a catalog&#x27;s field mappings (data types)
    # Set a catalog&#x27;s field mappings (data types). After being set, a given field&#x27;s data type may not be changed. Valid types: boolean, date, geo_location, long, double, object, and string.
    # @param body Catalog Field Types
    # @param catalog_name Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_field_types_with_http_info(body, catalog_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CatalogsApi.update_field_types ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CatalogsApi.update_field_types"
      end
      # verify the required parameter 'catalog_name' is set
      if @api_client.config.client_side_validation && catalog_name.nil?
        fail ArgumentError, "Missing the required parameter 'catalog_name' when calling CatalogsApi.update_field_types"
      end
      # resource path
      local_var_path = '/api/catalogs/{catalogName}/fieldMappings'.sub('{' + 'catalogName' + '}', catalog_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsApi#update_field_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
