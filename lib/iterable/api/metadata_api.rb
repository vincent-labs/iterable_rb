=begin
#Iterable API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.8

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.32
=end

module Iterable
  class MetadataApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a table
    # Asynchronous. Deletes the table. 200 response indicates a valid request that will be processed; table may not be deleted immediately. Use GET /api/metadata/{table} to verify completion.
    # @param table Table name [Alphanumeric, case insensitive]
    # @param [Hash] opts the optional parameters
    # @return [IterableApiResponse]
    def delete(table, opts = {})
      data, _status_code, _headers = delete_with_http_info(table, opts)
      data
    end

    # Delete a table
    # Asynchronous. Deletes the table. 200 response indicates a valid request that will be processed; table may not be deleted immediately. Use GET /api/metadata/{table} to verify completion.
    # @param table Table name [Alphanumeric, case insensitive]
    # @param [Hash] opts the optional parameters
    # @return [Array<(IterableApiResponse, Integer, Hash)>] IterableApiResponse data, response status code and response headers
    def delete_with_http_info(table, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetadataApi.delete ...'
      end
      # verify the required parameter 'table' is set
      if @api_client.config.client_side_validation && table.nil?
        fail ArgumentError, "Missing the required parameter 'table' when calling MetadataApi.delete"
      end
      # resource path
      local_var_path = '/api/metadata/{table}'.sub('{' + 'table' + '}', table.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'IterableApiResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetadataApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a single metadata key/value
    # Asynchronous. Deletes the specified item from the table. 200 response indicates a valid request that will be processed; data may not be deleted immediately. Use GET /api/metadata/{table}/{key} to verify completion.
    # @param table Table name [Alphanumeric, case insensitive]
    # @param key Metadata key [Alphanumeric, case sensitive]
    # @param [Hash] opts the optional parameters
    # @return [IterableApiResponse]
    def delete_0(table, key, opts = {})
      data, _status_code, _headers = delete_0_with_http_info(table, key, opts)
      data
    end

    # Delete a single metadata key/value
    # Asynchronous. Deletes the specified item from the table. 200 response indicates a valid request that will be processed; data may not be deleted immediately. Use GET /api/metadata/{table}/{key} to verify completion.
    # @param table Table name [Alphanumeric, case insensitive]
    # @param key Metadata key [Alphanumeric, case sensitive]
    # @param [Hash] opts the optional parameters
    # @return [Array<(IterableApiResponse, Integer, Hash)>] IterableApiResponse data, response status code and response headers
    def delete_0_with_http_info(table, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetadataApi.delete_0 ...'
      end
      # verify the required parameter 'table' is set
      if @api_client.config.client_side_validation && table.nil?
        fail ArgumentError, "Missing the required parameter 'table' when calling MetadataApi.delete_0"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling MetadataApi.delete_0"
      end
      # resource path
      local_var_path = '/api/metadata/{table}/{key}'.sub('{' + 'table' + '}', table.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'IterableApiResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetadataApi#delete_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the metadata value of a single key
    # @param table Table name [Alphanumeric, case insensitive]
    # @param key Metadata key [Alphanumeric, case sensitive]
    # @param [Hash] opts the optional parameters
    # @return [MetadataWithProperties]
    def get(table, key, opts = {})
      data, _status_code, _headers = get_with_http_info(table, key, opts)
      data
    end

    # Get the metadata value of a single key
    # @param table Table name [Alphanumeric, case insensitive]
    # @param key Metadata key [Alphanumeric, case sensitive]
    # @param [Hash] opts the optional parameters
    # @return [Array<(MetadataWithProperties, Integer, Hash)>] MetadataWithProperties data, response status code and response headers
    def get_with_http_info(table, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetadataApi.get ...'
      end
      # verify the required parameter 'table' is set
      if @api_client.config.client_side_validation && table.nil?
        fail ArgumentError, "Missing the required parameter 'table' when calling MetadataApi.get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling MetadataApi.get"
      end
      # resource path
      local_var_path = '/api/metadata/{table}/{key}'.sub('{' + 'table' + '}', table.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'MetadataWithProperties' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetadataApi#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List keys in a table
    # @param table Table name [Alphanumeric, case insensitive]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_marker next result set id; returned by previous search if more hits exist (default to None)
    # @return [Listing]
    def list(table, opts = {})
      data, _status_code, _headers = list_with_http_info(table, opts)
      data
    end

    # List keys in a table
    # @param table Table name [Alphanumeric, case insensitive]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_marker next result set id; returned by previous search if more hits exist
    # @return [Array<(Listing, Integer, Hash)>] Listing data, response status code and response headers
    def list_with_http_info(table, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetadataApi.list ...'
      end
      # verify the required parameter 'table' is set
      if @api_client.config.client_side_validation && table.nil?
        fail ArgumentError, "Missing the required parameter 'table' when calling MetadataApi.list"
      end
      # resource path
      local_var_path = '/api/metadata/{table}'.sub('{' + 'table' + '}', table.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'nextMarker'] = opts[:'next_marker'] if !opts[:'next_marker'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Listing' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetadataApi#list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List available tables
    # @param [Hash] opts the optional parameters
    # @return [ListMetadataTablesResponse]
    def list_tables(opts = {})
      data, _status_code, _headers = list_tables_with_http_info(opts)
      data
    end

    # List available tables
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListMetadataTablesResponse, Integer, Hash)>] ListMetadataTablesResponse data, response status code and response headers
    def list_tables_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetadataApi.list_tables ...'
      end
      # resource path
      local_var_path = '/api/metadata'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListMetadataTablesResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetadataApi#list_tables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or replace metadata
    # Asynchronous. Creates or replaces the item associated with the specified key. 200 response indicates a valid request that will be processed; updates may not be made immediately. Use GET /api/metadata/{table}/{key} to verify completion.
    # @param body Metadata properties
    # @param table Table name [Alphanumeric, case insensitive]
    # @param key Metadata key [Alphanumeric, case sensitive]
    # @param [Hash] opts the optional parameters
    # @return [IterableApiResponse]
    def put(body, table, key, opts = {})
      data, _status_code, _headers = put_with_http_info(body, table, key, opts)
      data
    end

    # Create or replace metadata
    # Asynchronous. Creates or replaces the item associated with the specified key. 200 response indicates a valid request that will be processed; updates may not be made immediately. Use GET /api/metadata/{table}/{key} to verify completion.
    # @param body Metadata properties
    # @param table Table name [Alphanumeric, case insensitive]
    # @param key Metadata key [Alphanumeric, case sensitive]
    # @param [Hash] opts the optional parameters
    # @return [Array<(IterableApiResponse, Integer, Hash)>] IterableApiResponse data, response status code and response headers
    def put_with_http_info(body, table, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetadataApi.put ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MetadataApi.put"
      end
      # verify the required parameter 'table' is set
      if @api_client.config.client_side_validation && table.nil?
        fail ArgumentError, "Missing the required parameter 'table' when calling MetadataApi.put"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling MetadataApi.put"
      end
      # resource path
      local_var_path = '/api/metadata/{table}/{key}'.sub('{' + 'table' + '}', table.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'IterableApiResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetadataApi#put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
