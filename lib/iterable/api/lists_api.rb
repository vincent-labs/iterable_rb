=begin
#Iterable API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.8

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

module Iterable
  class ListsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a static list
    # Create a new static list.
    # @param body name
    # @param [Hash] opts the optional parameters
    # @return [CreateListResponse]
    def create(body, opts = {})
      data, _status_code, _headers = create_with_http_info(body, opts)
      data
    end

    # Create a static list
    # Create a new static list.
    # @param body name
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateListResponse, Integer, Hash)>] CreateListResponse data, response status code and response headers
    def create_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListsApi.create ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ListsApi.create"
      end
      # resource path
      local_var_path = '/api/lists'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'CreateListResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a static list
    # Delete a static list by listId.
    # @param list_id list id
    # @param [Hash] opts the optional parameters
    # @return [IterableApiResponse]
    def delete(list_id, opts = {})
      data, _status_code, _headers = delete_with_http_info(list_id, opts)
      data
    end

    # Delete a static list
    # Delete a static list by listId.
    # @param list_id list id
    # @param [Hash] opts the optional parameters
    # @return [Array<(IterableApiResponse, Integer, Hash)>] IterableApiResponse data, response status code and response headers
    def delete_with_http_info(list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListsApi.delete ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ListsApi.delete"
      end
      # resource path
      local_var_path = '/api/lists/{listId}'.sub('{' + 'listId' + '}', list_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'IterableApiResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get count of users in list
    # Get the number of users within a list. <b>Rate limit</b>: 5 requests/minute, per project.
    # @param list_id list id
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_list_count(list_id, opts = {})
      data, _status_code, _headers = get_list_count_with_http_info(list_id, opts)
      data
    end

    # Get count of users in list
    # Get the number of users within a list. &lt;b&gt;Rate limit&lt;/b&gt;: 5 requests/minute, per project.
    # @param list_id list id
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_list_count_with_http_info(list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListsApi.get_list_count ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ListsApi.get_list_count"
      end
      # resource path
      local_var_path = '/api/lists/{listId}/size'.sub('{' + 'listId' + '}', list_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#get_list_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get lists
    # Get all lists within a project. <b>Rate limit</b>: 100 requests/second, per project.
    # @param [Hash] opts the optional parameters
    # @return [GetListsResponse]
    def get_lists(opts = {})
      data, _status_code, _headers = get_lists_with_http_info(opts)
      data
    end

    # Get lists
    # Get all lists within a project. &lt;b&gt;Rate limit&lt;/b&gt;: 100 requests/second, per project.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetListsResponse, Integer, Hash)>] GetListsResponse data, response status code and response headers
    def get_lists_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListsApi.get_lists ...'
      end
      # resource path
      local_var_path = '/api/lists'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GetListsResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#get_lists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get users in a list
    # Get all users within a list. <b>Rate limit</b>: 5 requests/minute, per project.
    # @param list_id list id
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_lists_0(list_id, opts = {})
      data, _status_code, _headers = get_lists_0_with_http_info(list_id, opts)
      data
    end

    # Get users in a list
    # Get all users within a list. &lt;b&gt;Rate limit&lt;/b&gt;: 5 requests/minute, per project.
    # @param list_id list id
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_lists_0_with_http_info(list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListsApi.get_lists_0 ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ListsApi.get_lists_0"
      end
      # resource path
      local_var_path = '/api/lists/getUsers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'listId'] = list_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#get_lists_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add subscribers to list
    # Add specific subscribers to a list.
    # @param body email list id and list of emails
    # @param [Hash] opts the optional parameters
    # @return [ListResponse]
    def subscribe(body, opts = {})
      data, _status_code, _headers = subscribe_with_http_info(body, opts)
      data
    end

    # Add subscribers to list
    # Add specific subscribers to a list.
    # @param body email list id and list of emails
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListResponse, Integer, Hash)>] ListResponse data, response status code and response headers
    def subscribe_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListsApi.subscribe ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ListsApi.subscribe"
      end
      # resource path
      local_var_path = '/api/lists/subscribe'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ListResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#subscribe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove users from a list
    # Remove specific users from a list.
    # @param body email list id and list of emails
    # @param [Hash] opts the optional parameters
    # @return [ListResponse]
    def unsubscribe(body, opts = {})
      data, _status_code, _headers = unsubscribe_with_http_info(body, opts)
      data
    end

    # Remove users from a list
    # Remove specific users from a list.
    # @param body email list id and list of emails
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListResponse, Integer, Hash)>] ListResponse data, response status code and response headers
    def unsubscribe_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListsApi.unsubscribe ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ListsApi.unsubscribe"
      end
      # resource path
      local_var_path = '/api/lists/unsubscribe'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ListResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#unsubscribe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
