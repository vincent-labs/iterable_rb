=begin
#Iterable API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.8

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.31
=end

module Iterable
  class InAppApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancel a scheduled in-app message
    # Cancels the sending of a scheduled in-app message to a specific user.
    # @param body Email and Campaign ID
    # @param [Hash] opts the optional parameters
    # @return [IterableApiResponse]
    def cancel(body, opts = {})
      data, _status_code, _headers = cancel_with_http_info(body, opts)
      data
    end

    # Cancel a scheduled in-app message
    # Cancels the sending of a scheduled in-app message to a specific user.
    # @param body Email and Campaign ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(IterableApiResponse, Integer, Hash)>] IterableApiResponse data, response status code and response headers
    def cancel_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InAppApi.cancel ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InAppApi.cancel"
      end
      # resource path
      local_var_path = '/api/inApp/cancel'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'IterableApiResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InAppApi#cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a user's in-app messages
    # Get a user's in-app messages. This endpoint always returns the user's non-selective (not app-specific) in-app messages; to also fetch app-specific in-app messages, include a <code>packageName</code> and <code>platform</code> in the request. This endpoint returns new messages and messages that have already been saved to a mobile inbox, and each message has a <code>read</code> field to indicate whether or not it has already been seen.
    # @param count The number of in-app messages to fetch.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email The email address of the user for which to fetch in-app messages. Specify either an email or a userId.
    # @option opts [String] :user_id The userId of the user for which to fetch in-app messages. Specify either an email or a userId.
    # @option opts [String] :platform The platform of the app for which to retrieve selective in-app messages: iOS or Android (case-sensitive). (default to None)
    # @option opts [String] :sdk_version Iterable SDK version (e.g., 6.2.17) (default to None)
    # @option opts [String] :package_name The package name of the app for which to retrieve selective in-app messages. (default to None)
    # @return [ApiInAppMessagesResponse]
    def get_messages(count, opts = {})
      data, _status_code, _headers = get_messages_with_http_info(count, opts)
      data
    end

    # Get a user&#x27;s in-app messages
    # Get a user&#x27;s in-app messages. This endpoint always returns the user&#x27;s non-selective (not app-specific) in-app messages; to also fetch app-specific in-app messages, include a &lt;code&gt;packageName&lt;/code&gt; and &lt;code&gt;platform&lt;/code&gt; in the request. This endpoint returns new messages and messages that have already been saved to a mobile inbox, and each message has a &lt;code&gt;read&lt;/code&gt; field to indicate whether or not it has already been seen.
    # @param count The number of in-app messages to fetch.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email The email address of the user for which to fetch in-app messages. Specify either an email or a userId.
    # @option opts [String] :user_id The userId of the user for which to fetch in-app messages. Specify either an email or a userId.
    # @option opts [String] :platform The platform of the app for which to retrieve selective in-app messages: iOS or Android (case-sensitive).
    # @option opts [String] :sdk_version Iterable SDK version (e.g., 6.2.17)
    # @option opts [String] :package_name The package name of the app for which to retrieve selective in-app messages.
    # @return [Array<(ApiInAppMessagesResponse, Integer, Hash)>] ApiInAppMessagesResponse data, response status code and response headers
    def get_messages_with_http_info(count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InAppApi.get_messages ...'
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling InAppApi.get_messages"
      end
      if @api_client.config.client_side_validation && opts[:'platform'] && !['iOS', 'Android'].include?(opts[:'platform'])
        fail ArgumentError, 'invalid value for "platform", must be one of iOS, Android'
      end
      # resource path
      local_var_path = '/api/inApp/getMessages'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'count'] = count
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'platform'] = opts[:'platform'] if !opts[:'platform'].nil?
      query_params[:'SDKVersion'] = opts[:'sdk_version'] if !opts[:'sdk_version'].nil?
      query_params[:'packageName'] = opts[:'package_name'] if !opts[:'package_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ApiInAppMessagesResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InAppApi#get_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Send an in-app notification to a user
    # Send an in-app notification to a specific user. Request data fields will override user profile data fields. A reference to the user profile is provided via the 'profile' field, to help resolve field collisions.
    # @param body Recipient and email id
    # @param [Hash] opts the optional parameters
    # @return [IterableApiResponse]
    def target(body, opts = {})
      data, _status_code, _headers = target_with_http_info(body, opts)
      data
    end

    # Send an in-app notification to a user
    # Send an in-app notification to a specific user. Request data fields will override user profile data fields. A reference to the user profile is provided via the &#x27;profile&#x27; field, to help resolve field collisions.
    # @param body Recipient and email id
    # @param [Hash] opts the optional parameters
    # @return [Array<(IterableApiResponse, Integer, Hash)>] IterableApiResponse data, response status code and response headers
    def target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InAppApi.target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InAppApi.target"
      end
      # resource path
      local_var_path = '/api/inApp/target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'IterableApiResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InAppApi#target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
