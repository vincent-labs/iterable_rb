{
  "swagger" : "2.0",
  "info" : {
    "version" : "1.8",
    "title" : "Iterable API",
    "termsOfService" : "https://iterable.com/terms-of-service/"
  },
  "host" : "api.iterable.com",
  "basePath" : "/",
  "tags" : [ {
    "name" : "In-app"
  }, {
    "name" : "SMS"
  }, {
    "name" : "campaigns"
  }, {
    "name" : "catalogs"
  }, {
    "name" : "channels"
  }, {
    "name" : "commerce"
  }, {
    "name" : "email"
  }, {
    "name" : "events"
  }, {
    "name" : "experiments"
  }, {
    "name" : "export"
  }, {
    "name" : "lists"
  }, {
    "name" : "messageTypes"
  }, {
    "name" : "metadata"
  }, {
    "name" : "push"
  }, {
    "name" : "subscriptions"
  }, {
    "name" : "templates"
  }, {
    "name" : "users"
  }, {
    "name" : "webPush"
  }, {
    "name" : "webhooks"
  }, {
    "name" : "workflows"
  } ],
  "security" : [ {
    "api_key" : [ ]
  } ],
  "paths" : {
    "/api/subscriptions/{subscriptionGroup}/{subscriptionGroupId}/user/{userEmail}" : {
      "delete" : {
        "tags" : [ "subscriptions" ],
        "summary" : "Unsubscribe a single user",
        "description" : "Updates a user to be unsubscribed to the provided subscription group entity. <br>To enable this API, please contact your CSM.",
        "operationId" : "unsubscribeSingleUser",
        "parameters" : [ {
          "name" : "subscriptionGroup",
          "in" : "path",
          "description" : "Subscription group (i.e.: emailList, messageType, messageChannel) [Alphanumeric, case insensitive]",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "subscriptionGroupId",
          "in" : "path",
          "description" : "Subscription Group Id [Numeric]",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "userEmail",
          "in" : "path",
          "description" : "User's Email [Alphanumeric]",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "202" : {
            "description" : "Accepted a request to unsubscribe"
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "404" : {
            "description" : "Endpoint not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "subscriptions" ],
        "summary" : "Subscribe a single user",
        "description" : "Updates a user to be subscribed to the provided subscription group entity. <br>To enable this API, please contact your CSM.",
        "operationId" : "subscribeSingleUser",
        "parameters" : [ {
          "name" : "subscriptionGroup",
          "in" : "path",
          "description" : "Subscription group (i.e.: emailList, messageType, messageChannel) [Alphanumeric, case insensitive]",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "subscriptionGroupId",
          "in" : "path",
          "description" : "Subscription Group Id [Numeric]",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "userEmail",
          "in" : "path",
          "description" : "User's Email [Alphanumeric]",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "202" : {
            "description" : "Accepted a request to subscribe"
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "404" : {
            "description" : "Endpoint not found"
          }
        }
      }
    },
    "/api/subscriptions/{subscriptionGroup}/{subscriptionGroupId}/byUserId/{userId}" : {
      "delete" : {
        "tags" : [ "subscriptions" ],
        "summary" : "Unsubscribe a single user by userId",
        "description" : "Updates a user to be unsubscribed to the provided subscription group entity. <br>To enable this API, please contact your CSM.",
        "operationId" : "unsubscribeSingleUserByUserId",
        "parameters" : [ {
          "name" : "subscriptionGroup",
          "in" : "path",
          "description" : "Subscription group (i.e.: emailList, messageType, messageChannel) [Alphanumeric, case insensitive]",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "subscriptionGroupId",
          "in" : "path",
          "description" : "Subscription Group Id [Numeric]",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "User's userId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "202" : {
            "description" : "Accepted a request to unsubscribe"
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "404" : {
            "description" : "Endpoint not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "subscriptions" ],
        "summary" : "Subscribe a single user by their userId",
        "description" : "Updates a user to be subscribed to the provided subscription group entity. <br>To enable this API, please contact your CSM.",
        "operationId" : "subscribeSingleUserByUserId",
        "parameters" : [ {
          "name" : "subscriptionGroup",
          "in" : "path",
          "description" : "Subscription group (i.e.: emailList, messageType, messageChannel) [Alphanumeric, case insensitive]",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "subscriptionGroupId",
          "in" : "path",
          "description" : "Subscription Group Id [Numeric]",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "User's userId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "202" : {
            "description" : "Accepted a request to subscribe"
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "404" : {
            "description" : "Endpoint not found"
          }
        }
      }
    },
    "/api/subscriptions/{subscriptionGroup}/{subscriptionGroupId}" : {
      "put" : {
        "tags" : [ "subscriptions" ],
        "summary" : "Bulk subscription action on a list of users",
        "description" : "Update a subscription group for a bulk number of users. All users will have the same event on the given subscriptionGroup. To enable this API, please contact your CSM.",
        "operationId" : "Bulk subscription action",
        "parameters" : [ {
          "name" : "subscriptionGroup",
          "in" : "path",
          "description" : "Subscription group (i.e.: emailList, messageType, messageChannel) [Alphanumeric, case insensitive]",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "subscriptionGroupId",
          "in" : "path",
          "description" : "Subscription Group Id [Numeric]",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "action",
          "in" : "query",
          "description" : "subscribe or unsubscribe",
          "required" : true,
          "type" : "string",
          "default" : "subscribe"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "user email",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BulkSubscriptionActionRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "202" : {
            "description" : "Accepted a request for bulk subscription actions"
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "404" : {
            "description" : "Endpoint not found"
          }
        }
      }
    },
    "/api/webhooks" : {
      "get" : {
        "tags" : [ "webhooks" ],
        "summary" : "Get webhooks",
        "description" : "Get webhooks for a project.",
        "operationId" : "getWebhooks",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetWebhooksResponse"
            }
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      },
      "post" : {
        "tags" : [ "webhooks" ],
        "summary" : "Update webhook",
        "description" : "",
        "operationId" : "updateWebhook",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Only the specified fields will be updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ApiWebhookModel"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiWebhookResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/commerce/updateCart" : {
      "post" : {
        "tags" : [ "commerce" ],
        "summary" : "Update a user's shopping cart items",
        "description" : "Update the 'shoppingCartItems' field on the user profile with shopping cart items. User profile is updated if it already exists (created otherwise) via the user field. Types of data fields must match the types sent in previous requests, across all data fields in the project.",
        "operationId" : "updateCart",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "state of the cart",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UpdateCartRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/commerce/trackPurchase" : {
      "post" : {
        "tags" : [ "commerce" ],
        "summary" : "Track a purchase",
        "description" : "Track purchase events. 'shoppingCartItems' field on the user profile is cleared. User profile is also updated if it already exists (created otherwise) using the user request field. Also, note that there is a soft limit on the number of unique fields a user can have (default is 1,000). Types of data fields must match the types sent in previous requests, across all data fields in the project.",
        "operationId" : "trackPurchase",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "purchase data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TrackPurchaseRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/push/target" : {
      "post" : {
        "tags" : [ "push" ],
        "summary" : "Send push notification to user",
        "description" : "Send a push notification to a specific user. Request data fields will override user profile data fields. A reference to the user profile is provided via the 'profile' field, to help resolve field collisions.",
        "operationId" : "target",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Recipient and email id",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TargetPushRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/push/cancel" : {
      "post" : {
        "tags" : [ "push" ],
        "summary" : "Cancel a push notification to a user",
        "description" : "Cancel a push notification to a specific user. Must include either an email address AND campaignId, or just a scheduledMessageId.",
        "operationId" : "cancel",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Email and Campaign ID",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CancelScheduledMessageRequest - campaignId OR scheduledMessageId are required"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/experiments/metrics" : {
      "get" : {
        "tags" : [ "experiments" ],
        "summary" : "Get metrics for experiments",
        "description" : "Get metrics for a single experiment or for multiple experiments. Note that we currently only support exporting email experiment metrics.",
        "operationId" : "metrics",
        "produces" : [ "text/csv" ],
        "parameters" : [ {
          "name" : "experimentId",
          "in" : "query",
          "description" : "Experiment to export. Specify multiple experimentId query parameters to export multiple experiments.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "object"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "campaignId",
          "in" : "query",
          "description" : "Campaign whose experiments you want to export. Specify multiple campaignId query parameters to export multiple campaigns.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "object"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "startDateTime",
          "in" : "query",
          "description" : "export starting from (>=)",
          "required" : false,
          "type" : "string",
          "default" : "2018-06-25",
          "format" : "date-time"
        }, {
          "name" : "endDateTime",
          "in" : "query",
          "description" : "export ending at (<=)",
          "required" : false,
          "type" : "string",
          "default" : "2018-07-25",
          "format" : "date-time"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ExperimentMetricsResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/lists/{listId}" : {
      "delete" : {
        "tags" : [ "lists" ],
        "summary" : "Delete a static list",
        "description" : "Delete a static list by listId.",
        "operationId" : "delete",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "list id",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/lists" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "Get lists",
        "description" : "Get all lists within a project. <b>Rate limit</b>: 100 requests/second, per project.",
        "operationId" : "getLists",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetListsResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      },
      "post" : {
        "tags" : [ "lists" ],
        "summary" : "Create a static list",
        "description" : "Create a new static list.",
        "operationId" : "create",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "name",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateListRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CreateListResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/lists/getUsers" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "Get users in a list",
        "description" : "Get all users within a list. <b>Rate limit</b>: 5 requests/minute, per project.",
        "operationId" : "getLists",
        "produces" : [ "text/plain" ],
        "parameters" : [ {
          "name" : "listId",
          "in" : "query",
          "description" : "list id",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "503" : {
            "description" : "Request timeout.  Try again later."
          }
        }
      }
    },
    "/api/lists/{listId}/size" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "Get count of users in list",
        "description" : "Get the number of users within a list. <b>Rate limit</b>: 5 requests/minute, per project.",
        "operationId" : "getListCount",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "list id",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "503" : {
            "description" : "Request timeout.  Try again later."
          }
        }
      }
    },
    "/api/lists/subscribe" : {
      "post" : {
        "tags" : [ "lists" ],
        "summary" : "Add subscribers to list",
        "description" : "Add specific subscribers to a list.",
        "operationId" : "subscribe",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "email list id and list of emails",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SubscribeRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ListResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/lists/unsubscribe" : {
      "post" : {
        "tags" : [ "lists" ],
        "summary" : "Remove users from a list",
        "description" : "Remove specific users from a list.",
        "operationId" : "unsubscribe",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "email list id and list of emails",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UnsubscribeRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ListResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/export/data.csv" : {
      "get" : {
        "tags" : [ "export" ],
        "summary" : "Export data to CSV",
        "description" : "Export campaign analytics data in CSV format. Use of either 'range' or 'startDateTime' and 'endDateTime' is required.<br/><b>Rate limit</b>: 4 requests/minute, per project.",
        "operationId" : "exportDataCsv",
        "produces" : [ "text/csv" ],
        "parameters" : [ {
          "name" : "dataTypeName",
          "in" : "query",
          "description" : "data type name",
          "required" : true,
          "type" : "string",
          "enum" : [ "emailSend", "emailOpen", "emailClick", "hostedUnsubscribeClick", "emailComplaint", "emailBounce", "emailSendSkip", "pushSend", "pushOpen", "pushUninstall", "pushBounce", "pushSendSkip", "inAppSend", "inAppOpen", "inAppClick", "inAppClose", "inAppDelete", "inAppDelivery", "inAppSendSkip", "inboxSession", "inboxMessageImpression", "smsSend", "smsBounce", "smsClick", "smsReceived", "smsSendSkip", "webPushSend", "webPushClick", "webPushSendSkip", "emailSubscribe", "emailUnSubscribe", "purchase", "customEvent", "user" ]
        }, {
          "name" : "range",
          "in" : "query",
          "description" : "date range, uses UTC time",
          "required" : false,
          "type" : "string",
          "default" : "Today",
          "enum" : [ "Today", "Yesterday", "BeforeToday", "All" ]
        }, {
          "name" : "delimiter",
          "in" : "query",
          "description" : "CSV filter delimiter",
          "required" : false,
          "type" : "string",
          "default" : ","
        }, {
          "name" : "startDateTime",
          "in" : "query",
          "description" : "Export starting from (>=) (yyyy-MM-dd HH:mm:ss [ZZ])",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "endDateTime",
          "in" : "query",
          "description" : "Export ending at (<) (yyyy-MM-dd HH:mm:ss [ZZ])",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "omitFields",
          "in" : "query",
          "description" : "Fields to omit (comma separated)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "onlyFields",
          "in" : "query",
          "description" : "If non-empty, will only export these fields",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "default" : "List.empty"
        }, {
          "name" : "campaignId",
          "in" : "query",
          "description" : "If provided, only export data from this campaign",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        }
      }
    },
    "/api/export/data.json" : {
      "get" : {
        "tags" : [ "export" ],
        "summary" : "Export data to JSON",
        "description" : "Export campaign analytics data in JSON format, one entry per line. Use of either 'range' or 'startDateTime' and 'endDateTime' is required.<br/><b>Rate limit</b>: 4 requests/minute, per project.",
        "operationId" : "exportDataJson",
        "produces" : [ "application/x-json-stream" ],
        "parameters" : [ {
          "name" : "dataTypeName",
          "in" : "query",
          "description" : "data type name",
          "required" : true,
          "type" : "string",
          "enum" : [ "emailSend", "emailOpen", "emailClick", "hostedUnsubscribeClick", "emailComplaint", "emailBounce", "emailSendSkip", "pushSend", "pushOpen", "pushUninstall", "pushBounce", "pushSendSkip", "inAppSend", "inAppOpen", "inAppClick", "inAppClose", "inAppDelete", "inAppDelivery", "inAppSendSkip", "inboxSession", "inboxMessageImpression", "smsSend", "smsBounce", "smsClick", "smsReceived", "smsSendSkip", "webPushSend", "webPushClick", "webPushSendSkip", "emailSubscribe", "emailUnSubscribe", "purchase", "customEvent", "user" ]
        }, {
          "name" : "range",
          "in" : "query",
          "description" : "date range, uses UTC time",
          "required" : false,
          "type" : "string",
          "default" : "Today",
          "enum" : [ "Today", "Yesterday", "BeforeToday", "All" ]
        }, {
          "name" : "startDateTime",
          "in" : "query",
          "description" : "export starting from (&gt;=) (yyyy-MM-dd HH:mm:ss [ZZ])",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "endDateTime",
          "in" : "query",
          "description" : "export ending at (&lt;) (yyyy-MM-dd HH:mm:ss [ZZ])",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "omitFields",
          "in" : "query",
          "description" : "fields to omit (comma separated)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "onlyFields",
          "in" : "query",
          "description" : "if nonempty, will only export these fields",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "default" : "List.empty"
        }, {
          "name" : "campaignId",
          "in" : "query",
          "description" : "if provided, only export data from this campaign",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        }
      }
    },
    "/api/export/userEvents" : {
      "get" : {
        "tags" : [ "export" ],
        "summary" : "Export user events",
        "description" : "Export all events in JSON format for a user. One event per line.",
        "operationId" : "exportUserEvents",
        "produces" : [ "application/x-json-stream" ],
        "parameters" : [ {
          "name" : "email",
          "in" : "query",
          "description" : "email",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "includeCustomEvents",
          "in" : "query",
          "description" : "Include Custom Events",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        }
      }
    },
    "/api/campaigns/trigger" : {
      "post" : {
        "tags" : [ "campaigns" ],
        "summary" : "Trigger a campaign",
        "description" : "Trigger a campaign given lists",
        "operationId" : "trigger campaign",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Trigger campaign",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TriggerCampaignRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/campaigns/create" : {
      "post" : {
        "tags" : [ "campaigns" ],
        "summary" : "Create a campaign",
        "description" : "Create a new campaign",
        "operationId" : "create campaign",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Create campaign",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateCampaignRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CreateCampaignResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/campaigns/abort" : {
      "post" : {
        "tags" : [ "campaigns" ],
        "summary" : "Abort a campaign",
        "description" : "Abort a campaign given a campaign ID",
        "operationId" : "abort campaign",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Abort campaign",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CampaignIdRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/campaigns/recurring/{id}/childCampaigns" : {
      "get" : {
        "tags" : [ "campaigns" ],
        "summary" : "Get child campaigns of a recurring campaign",
        "description" : "Get child campaigns generated by a recurring campaign. <b>Rate limit</b>: 100 requests/second, per project.",
        "operationId" : "child campaigns",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CampaignsResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/campaigns/cancel" : {
      "post" : {
        "tags" : [ "campaigns" ],
        "summary" : "Cancel a scheduled or recurring campaign",
        "description" : "Cancel a campaign given a campaign ID",
        "operationId" : "cancel campaign",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Cancel campaign",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CampaignIdRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/campaigns" : {
      "get" : {
        "tags" : [ "campaigns" ],
        "summary" : "List campaign metadata",
        "description" : "Get metadata about campaigns in a project. <b>Rate limit</b>: 100 requests/second, per project.",
        "operationId" : "campaigns",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CampaignsResponse"
            }
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/campaigns/metrics" : {
      "get" : {
        "tags" : [ "campaigns" ],
        "summary" : "Get metrics for campaigns",
        "description" : "Get metrics for a single campaign or multiple campaigns. <b>Rate limit</b>: 100 requests/second, per project.",
        "operationId" : "metrics",
        "produces" : [ "text/plain" ],
        "parameters" : [ {
          "name" : "campaignId",
          "in" : "query",
          "description" : "Campaign(s) to export",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "object"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "startDateTime",
          "in" : "query",
          "description" : "Export starting from (>=).  Accepted formats include YYYY-MM-DD and other ISO 8601 formats.",
          "required" : false,
          "type" : "string",
          "default" : "2018-06-25",
          "format" : "date-time",
          "allowEmptyValue" : true
        }, {
          "name" : "endDateTime",
          "in" : "query",
          "description" : "Export ending at (<).  Accepted formats include YYYY-MM-DD and other ISO 8601 formats.",
          "required" : false,
          "type" : "string",
          "default" : "2018-07-25",
          "format" : "date-time",
          "allowEmptyValue" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/workflows/triggerWorkflow" : {
      "post" : {
        "tags" : [ "workflows" ],
        "summary" : "Trigger a workflow",
        "description" : "Trigger a workflow. Triggering with a list is asynchronous. If a list trigger is in progress, it must finish before the same list can be triggered again for a particular workflow. The workflow stats may take several minutes to update if other workflows are running.",
        "operationId" : "triggerWorkflow",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Trigger workflow request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TriggerWorkflowRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/events/trackBulk" : {
      "post" : {
        "tags" : [ "events" ],
        "summary" : "Bulk track events",
        "description" : "Events are created asynchronously and <b>processed separately from single event (non-bulk) endpoint</b>. Thus, if you need to make sure events are tracked in order, it is recommended that all of them are sent to the same endpoint (either bulk or non-bulk). <br /> Please note there is a soft limit (default is 8,000) on the number of unique fields a custom event can have. For events of the same name, identically named data fields must be of the same type.<br/><b>Rate limit</b>: 10 requests/second, per project.",
        "operationId" : "trackBulk",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Events to track",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BulkTrackRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BulkTrackResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/events/trackWebPushClick" : {
      "post" : {
        "tags" : [ "events" ],
        "summary" : "Track a web push click",
        "description" : "",
        "operationId" : "trackWebPushClick",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Web Push click to track",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WebPushClickEventRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/events/trackPushOpen" : {
      "post" : {
        "tags" : [ "events" ],
        "summary" : "Track a mobile push open",
        "description" : "",
        "operationId" : "trackPushOpen",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Push open to track",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TrackPushOpenRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/events/trackInAppOpen" : {
      "post" : {
        "tags" : [ "events" ],
        "summary" : "Track an in-app message open",
        "description" : "Creates an inAppOpen event for the specified user and message, and marks the message as having been read. When not using one of Iterable’s mobile SDKs, call this endpoint when a mobile app displays an in-app message to a user.",
        "operationId" : "trackInAppOpen",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "In-app open to track",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InAppOpenRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/events/trackInAppClick" : {
      "post" : {
        "tags" : [ "events" ],
        "summary" : "Track an in-app message click",
        "description" : "Creates an inAppClick event for the specified user, message, and URL. When not using one of Iterable’s mobile SDKs, call this endpoint when a user taps on a button or link in an in-app message.",
        "operationId" : "trackInAppClick",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "In-app click to track",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InAppClickRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/events/trackInAppDelivery" : {
      "post" : {
        "tags" : [ "events" ],
        "summary" : "Track the delivery of an in-app message",
        "description" : "Creates an inAppDelivery event for a specific user, device, and message. When not using Iterable's mobile SDKs, call this endpoint to indicate that a particular message has been delivered to a particular device for a particular user. Take care not to call this endpoint multiple times for the same message/device/user combination.",
        "operationId" : "trackInAppDelivery",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "In-app delivery to track",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InAppDeliveryRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/events/trackInAppClose" : {
      "post" : {
        "tags" : [ "events" ],
        "summary" : "Track the closing of an in-app message",
        "description" : "Creates an inAppClose event for a specific user and in-app message. When not using Iterable's mobile SDKs, call this endpoint to indicate that the user tapped a close button, link or back button to close a particular in app-message.",
        "operationId" : "trackInAppClose",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "In-app close to track",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InAppCloseRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/events/inAppConsume" : {
      "post" : {
        "tags" : [ "events" ],
        "summary" : "Consume or delete an in-app message",
        "description" : "Consumes or deletes an in-app message from the server. Use this API if your app does not use one of Iterable’s mobile SDKs, since they call it automatically. If an incoming in-app message is not configured to use the mobile inbox, use this API to \"consume\" it from the server queue after the user sees it. Otherwise, call this API when the user explicitly deletes an inbox-enabled message (by clicking a delete button in its content, swiping it in the inbox, etc.). If you pass a deleteAction value to this endpoint, Iterable generates an inAppDelete event; otherwise, it does not.",
        "operationId" : "inAppConsume",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "In-app notification to consume",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InAppConsumeRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/events/{email}" : {
      "get" : {
        "tags" : [ "events" ],
        "summary" : "Get user events",
        "description" : "Get events for a specific user. <b>Rate limit</b>: 100 requests/second, per project.",
        "operationId" : "User events",
        "parameters" : [ {
          "name" : "email",
          "in" : "path",
          "description" : "Email of the user whose events you are retrieving.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The number of events to retrieve.  (Max is 200)",
          "required" : false,
          "type" : "integer",
          "default" : 30,
          "maximum" : 200,
          "minimum" : 1,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetEventsResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/events/byUserId/{userId}" : {
      "get" : {
        "tags" : [ "events" ],
        "summary" : "Get user events by userId",
        "description" : "Get events for a specific user by userId. <b>Rate limit</b>: 100 requests/second, per project.",
        "operationId" : "User events by userId",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "UserId of the user whose events you are retrieving.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The number of events to retrieve.  (Max is 200)",
          "required" : false,
          "type" : "integer",
          "default" : 30,
          "maximum" : 200,
          "minimum" : 1,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetEventsResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/events/track" : {
      "post" : {
        "tags" : [ "events" ],
        "summary" : "Track an event",
        "description" : "Events are created asynchronously and <b>processed separately from single event (non-bulk) endpoint</b>. Thus, if you need to make sure events are tracked in order, it is recommended that all of them are sent to the same endpoint (either bulk or non-bulk). <br/>Please note there is a soft limit (default is 8,000) on the number of unique fields a custom event can have. For events of the same name, identically named data fields must be of the same type.<br/><b>Rate limit</b>: 2000 requests/second, per project.",
        "operationId" : "track",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Event to track",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TrackRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/sms/target" : {
      "post" : {
        "tags" : [ "SMS" ],
        "summary" : "Send SMS notification to user",
        "description" : "Send an SMS notification to a specific user. Note that this API is typically used for transactional messaging. Request data fields will override user profile data fields.A reference to the user profile is provided via the 'profile' field, to help resolve field collisions.",
        "operationId" : "target",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Recipient and email ID",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TargetSMSRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/sms/cancel" : {
      "post" : {
        "tags" : [ "SMS" ],
        "summary" : "Cancel an SMS to a user",
        "description" : "Cancel an SMS to a specific user. Must include either an email address AND campaignId, or just a scheduledMessageId.",
        "operationId" : "cancel",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Email and Campaign ID",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CancelScheduledMessageRequest - campaignId OR scheduledMessageId are required"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/email/target" : {
      "post" : {
        "tags" : [ "email" ],
        "summary" : "Send an email to an email address",
        "description" : "Send an email to a specific email address. Request data fields will override user profile data fields. A reference to the user profile is provided via the 'profile' field, to help resolve field collisions.",
        "operationId" : "target",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Recipient and email id",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TargetEmailRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/email/viewInBrowser" : {
      "get" : {
        "tags" : [ "email" ],
        "summary" : "View a previously sent email",
        "description" : "View a rendered version of a previously sent email. <b>Rate limit</b>: 100 requests/second, per project.",
        "operationId" : "viewInBrowser",
        "parameters" : [ {
          "name" : "email",
          "in" : "query",
          "description" : "user's email",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "userId",
          "in" : "query",
          "description" : "user's userId",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "messageId",
          "in" : "query",
          "description" : "id of sent message",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "404" : {
            "description" : "Data feed error encountered"
          }
        }
      }
    },
    "/api/email/cancel" : {
      "post" : {
        "tags" : [ "email" ],
        "summary" : "Cancel an email to a user",
        "description" : "Cancel an email to a specific user. Must include either an email address AND campaignId, or just a scheduledMessageId.",
        "operationId" : "cancel",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Email and Campaign ID",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CancelScheduledMessageRequest - campaignId OR scheduledMessageId are required"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/catalogs/{catalogName}/items/{itemId}" : {
      "get" : {
        "tags" : [ "catalogs" ],
        "summary" : "Get a specific catalog item",
        "description" : "Get a specific catalog item from the given catalog.",
        "operationId" : "getCatalogItem",
        "parameters" : [ {
          "name" : "catalogName",
          "in" : "path",
          "description" : "Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "itemId",
          "in" : "path",
          "description" : "Catalog item id [Alphanumeric, dashes, case sensitive, 255 characters max]",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Catalog Item",
            "schema" : {
              "$ref" : "#/definitions/CatalogItemWithProperties"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "404" : {
            "description" : "No catalog item at specified location"
          }
        }
      },
      "put" : {
        "tags" : [ "catalogs" ],
        "summary" : "Create or replace a catalog item",
        "description" : "Asynchronous. Create or replace the specified catalog item in the given catalog. A catalog item's ID must be unique, contain only alphanumeric characters and dashes, and have a maximum length of 255 characters. If the catalog item already exists, it will be replaced by the value provided in the request body. Do not use periods in field names.",
        "operationId" : "indexCatalogItem",
        "parameters" : [ {
          "name" : "catalogName",
          "in" : "path",
          "description" : "Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "itemId",
          "in" : "path",
          "description" : "Catalog item id [Alphanumeric, dashes, case sensitive, 255 characters max]",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Catalog item value",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CatalogIndexItemRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "202" : {
            "description" : "Catalog item update request received. Use GET /api/catalogs/{catalogName}/items/{itemId} to verify completion."
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      },
      "delete" : {
        "tags" : [ "catalogs" ],
        "summary" : "Delete a catalog item",
        "description" : "Asynchronous. Deletes the specified item from the catalog. Data may not be deleted immediately.",
        "operationId" : "deleteCatalogItem",
        "parameters" : [ {
          "name" : "catalogName",
          "in" : "path",
          "description" : "Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "itemId",
          "in" : "path",
          "description" : "Catalog item id [Alphanumeric, dashes, case sensitive, 255 characters max]",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "202" : {
            "description" : "Received request to deleted item. Use GET /api/catalogs/{catalogName}/items/{itemId} to verify completion."
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      },
      "patch" : {
        "tags" : [ "catalogs" ],
        "summary" : "Create or update a catalog item",
        "description" : "Asynchronous. Create or update the specified catalog item in the given catalog. A catalog item's ID must be unique, contain only alphanumeric characters and dashes, and have a maximum length of 255 characters. If the catalog item already exists, its fields will be updated with the values provided in the request body. Previously existing fields not included in the request body will remain as is. Do not use periods in field names.",
        "operationId" : "partialUpdateCatalogItem",
        "parameters" : [ {
          "name" : "catalogName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "itemId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Catalog item contents",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CatalogUpdateItemRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "202" : {
            "description" : "Catalog item update request received. Use GET /api/catalogs/{catalogName}/items/{itemId} to verify completion."
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/catalogs/{catalogName}/items" : {
      "get" : {
        "tags" : [ "catalogs" ],
        "summary" : "Get the catalog items for a catalog",
        "description" : "",
        "operationId" : "listCatalogItems",
        "parameters" : [ {
          "name" : "catalogName",
          "in" : "path",
          "description" : "Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page number to list (starting at 1).",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Number of results to display per page (defaults to 10).",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 10
        }, {
          "name" : "orderBy",
          "in" : "query",
          "description" : "Field by which results should be ordered. To also use the sortAscending parameter, this field must have a defined type.",
          "required" : false,
          "type" : "string",
          "x-example" : "myField"
        }, {
          "name" : "sortAscending",
          "in" : "query",
          "description" : "Sort results by ascending (Defaults to false).",
          "required" : false,
          "type" : "boolean",
          "x-example" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "Items in the catalog that satisfy the request restraints",
            "schema" : {
              "$ref" : "#/definitions/GetCatalogItemsResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "404" : {
            "description" : "Catalog not found"
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      },
      "post" : {
        "tags" : [ "catalogs" ],
        "summary" : "Bulk create catalog items",
        "description" : "Asynchronous. Create up to 1000 catalog items with a single request. Each of a catalog's items must have a unique ID that contains only alphanumeric characters and dashes and has a maximum length of 255 characters. If the catalog already contains an item with the same ID as one provided in the request body, the item in the catalog will be completely overwritten, unless replaceUploadedFieldsOnly is set to true. Do not use periods in field names.",
        "operationId" : "bulkUpdateCatalogItems",
        "parameters" : [ {
          "name" : "catalogName",
          "in" : "path",
          "description" : "Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Catalog bulk update request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CatalogBulkUploadRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "202" : {
            "description" : "Request to bulk upload items received"
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "404" : {
            "description" : "Catalog not found"
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      },
      "delete" : {
        "tags" : [ "catalogs" ],
        "summary" : "Bulk delete catalog items",
        "description" : "Asynchronous. Delete the specified catalog items from the catalog.",
        "operationId" : "bulkDeleteCatalogItems",
        "parameters" : [ {
          "name" : "catalogName",
          "in" : "path",
          "description" : "Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Catalog bulk delete request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CatalogBulkDeleteRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "202" : {
            "description" : "Bulk delete catalog items request received."
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/catalogs" : {
      "get" : {
        "tags" : [ "catalogs" ],
        "summary" : "Get catalog names",
        "description" : "",
        "operationId" : "listCatalogs",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page number to list (starting at 1).",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Number of results to display per page (defaults to 10).",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 10
        } ],
        "responses" : {
          "200" : {
            "description" : "List of catalogs",
            "schema" : {
              "$ref" : "#/definitions/GetCatalogsResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/catalogs/{catalogName}/fieldMappings" : {
      "get" : {
        "tags" : [ "catalogs" ],
        "summary" : "Get field mappings for a catalog",
        "description" : "Field mappings (field to data types) and undefined fields of a catalog",
        "operationId" : "getFieldMappings",
        "parameters" : [ {
          "name" : "catalogName",
          "in" : "path",
          "description" : "Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Field mappings for catalog.",
            "schema" : {
              "$ref" : "#/definitions/CatalogFieldMappingsResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      },
      "put" : {
        "tags" : [ "catalogs" ],
        "summary" : "Set a catalog's field mappings (data types)",
        "description" : "Set a catalog's field mappings (data types). After being set, a given field's data type may not be changed. Valid types: boolean, date, geo_location, long, double, object, and string.",
        "operationId" : "updateFieldTypes",
        "parameters" : [ {
          "name" : "catalogName",
          "in" : "path",
          "description" : "Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Catalog Field Types",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CatalogMappingsUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Catalog field mappings updated"
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/catalogs/{catalogName}" : {
      "post" : {
        "tags" : [ "catalogs" ],
        "summary" : "Create a catalog",
        "description" : "Create a catalog. Each catalog in a project must have a unique name. Catalog names can be no longer than 255 characters and must contain only alphanumeric characters and dashes.",
        "operationId" : "createCatalog",
        "parameters" : [ {
          "name" : "catalogName",
          "in" : "path",
          "description" : "Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "201" : {
            "description" : "Catalog created"
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      },
      "delete" : {
        "tags" : [ "catalogs" ],
        "summary" : "Delete a catalog",
        "description" : "Delete the catalog with the specified name.",
        "operationId" : "deleteCatalog",
        "parameters" : [ {
          "name" : "catalogName",
          "in" : "path",
          "description" : "Catalog name [Alphanumeric, dashes, case insensitive, 255 characters max]",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Catalog deleted",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/messageTypes" : {
      "get" : {
        "tags" : [ "messageTypes" ],
        "summary" : "List message types",
        "description" : "List all message types within a project. <b>Rate limit</b>: 100 requests/second, per project.",
        "operationId" : "messageTypes",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MessageTypesResponse"
            }
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/templates/getByClientTemplateId" : {
      "get" : {
        "tags" : [ "templates" ],
        "summary" : "Get an email template by clientTemplateId",
        "description" : "<b>Rate limit</b>: 100 requests/second, per project.",
        "operationId" : "getByClientTemplateId",
        "parameters" : [ {
          "name" : "clientTemplateId",
          "in" : "query",
          "description" : "Client Template Id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ClientTemplateIdResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/templates/email/get" : {
      "get" : {
        "tags" : [ "templates" ],
        "summary" : "Get an email template by templateId",
        "description" : "<b>Rate limit</b>: 100 requests/second, per project.",
        "operationId" : "getEmailTemplate",
        "parameters" : [ {
          "name" : "templateId",
          "in" : "query",
          "description" : "Template ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "locale",
          "in" : "query",
          "description" : "Locale of content to get",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiEmailTemplateModel"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "404" : {
            "description" : "Content does not exist for specified locale"
          }
        }
      }
    },
    "/api/templates/email/upsert" : {
      "post" : {
        "tags" : [ "templates" ],
        "summary" : "Create email template",
        "description" : "Create email template if it doesn't exist already, otherwise update all email templates which match the name provided.",
        "operationId" : "upsertEmailTemplate",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Only the fields specified will be updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UpsertEmailTemplateModel"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/templates/email/update" : {
      "post" : {
        "tags" : [ "templates" ],
        "summary" : "Update email template",
        "description" : "",
        "operationId" : "updateEmailTemplate",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Only the fields specified will be updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ApiEmailTemplateModel"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/templates/push/get" : {
      "get" : {
        "tags" : [ "templates" ],
        "summary" : "Get a push template",
        "description" : "<b>Rate limit</b>: 100 requests/second, per project.",
        "operationId" : "getPushTemplate",
        "parameters" : [ {
          "name" : "templateId",
          "in" : "query",
          "description" : "Template ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "locale",
          "in" : "query",
          "description" : "Locale of content to get",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiPushTemplateModel"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "404" : {
            "description" : "Content does not exit for specified locale"
          }
        }
      }
    },
    "/api/templates/push/upsert" : {
      "post" : {
        "tags" : [ "templates" ],
        "summary" : "Create a push template",
        "description" : "Create a push template if it doesn't exist, otherwise update all push templates which match the name provided.",
        "operationId" : "upsertPushTemplate",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Only the fields specified will be updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UpsertPushTemplateModel"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/templates/push/update" : {
      "post" : {
        "tags" : [ "templates" ],
        "summary" : "Update push template",
        "description" : "",
        "operationId" : "updatePushTemplate",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Only the fields specified will be updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ApiPushTemplateModel"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/templates/sms/get" : {
      "get" : {
        "tags" : [ "templates" ],
        "summary" : "Get an SMS template",
        "description" : "<b>Rate limit</b>: 100 requests/second, per project.",
        "operationId" : "getSMSTemplate",
        "parameters" : [ {
          "name" : "templateId",
          "in" : "query",
          "description" : "Template ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "locale",
          "in" : "query",
          "description" : "Locale of content to get",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiSMSTemplateModel"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "404" : {
            "description" : "Content does not exit for specified locale"
          }
        }
      }
    },
    "/api/templates/sms/upsert" : {
      "post" : {
        "tags" : [ "templates" ],
        "summary" : "Create an SMS template",
        "description" : "Create an SMS template if it doesn't exist yet, otherwise update all SMS templates which match the name provided.",
        "operationId" : "upsertSMSTemplate",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Only the fields specified will be updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UpsertSMSTemplateModel"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/templates/sms/update" : {
      "post" : {
        "tags" : [ "templates" ],
        "summary" : "Update SMS template",
        "description" : "",
        "operationId" : "updateSMSTemplate",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Only the fields specified will be updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ApiSMSTemplateModel"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/templates/inapp/get" : {
      "get" : {
        "tags" : [ "templates" ],
        "summary" : "Get an in-app template",
        "description" : "",
        "operationId" : "getInAppTemplate",
        "parameters" : [ {
          "name" : "templateId",
          "in" : "query",
          "description" : "Template ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "locale",
          "in" : "query",
          "description" : "Locale of content to get",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiInAppTemplateModel"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "404" : {
            "description" : "Content does not exit for specified locale"
          }
        }
      }
    },
    "/api/templates/inapp/upsert" : {
      "post" : {
        "tags" : [ "templates" ],
        "summary" : "Create an in-app template",
        "description" : "Create an in-app template if it doesn't exist yet, otherwise update all in-app templates which match the name provided.",
        "operationId" : "upsertInAppTemplate",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Only the fields specified will be updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UpsertInAppTemplateModel"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/templates/inapp/update" : {
      "post" : {
        "tags" : [ "templates" ],
        "summary" : "Update in-app template",
        "description" : "",
        "operationId" : "updateInAppTemplate",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Only the fields specified will be updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ApiInAppTemplateModel"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/templates" : {
      "get" : {
        "tags" : [ "templates" ],
        "summary" : "Get project templates",
        "description" : "Get templates for a project. <b>Rate limit</b>: 100 requests/second, per project.",
        "operationId" : "getTemplates",
        "parameters" : [ {
          "name" : "templateType",
          "in" : "query",
          "description" : "Only retrieve templates associated with this template type",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "enum" : [ "Base", "Blast", "Triggered", "Workflow" ]
        }, {
          "name" : "messageMedium",
          "in" : "query",
          "description" : "Only retrieve templates associated with this message medium",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "enum" : [ "Email", "Push", "InApp", "SMS" ]
        }, {
          "name" : "startDateTime",
          "in" : "query",
          "description" : "Get templates created at or after this date time (yyyy-MM-dd HH:mm:ss [ZZ])",
          "required" : false,
          "type" : "string",
          "format" : "date-time"
        }, {
          "name" : "endDateTime",
          "in" : "query",
          "description" : "Get templates created before this date time (yyyy-MM-dd HH:mm:ss [ZZ])",
          "required" : false,
          "type" : "string",
          "format" : "date-time"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetTemplatesResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/auth/jwts/invalidate" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Invalidate all JWTs issued for a user",
        "description" : "Invalidate all JWTs issued for a user before the current time or before the specified time.",
        "operationId" : "Invalidate JWT",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Invalid JWT request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InvalidateJwtRequest"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/forgotten" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Get hashed forgotten users in compliance with GDPR",
        "description" : "Get all hashed user emails that are currently in the blacklist. In order to calculate the hash, every email is lowercased, trimmed and hashed using SHA-256.<br><b>Rate limit</b>: 3 requests/second, per project.",
        "operationId" : "exportProjectForgottenUsers",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetForgottenUserEmailsResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/forget" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Forget a user in compliance with GDPR",
        "description" : "Delete the specified user's data from the Iterable project and prevent future data collection about them.<br><b>Rate limit</b>: 3 requests/second, per project.",
        "operationId" : "forget",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "user's email to be added to blacklist.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UserRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/unforget" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Unforget a user in compliance with GDPR",
        "description" : "Allow the Iterable project to resume collecting data about a previously forgotten user. Deleted data cannot be recovered.<br><b>Rate limit</b>: 3 requests/second, per project.",
        "operationId" : "unforget",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "user's email to be removed from blacklist.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UserRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/inApp/getMessages" : {
      "get" : {
        "tags" : [ "In-app" ],
        "summary" : "Get a user's in-app messages",
        "description" : "Get a user's in-app messages. This endpoint always returns the user's non-selective (not app-specific) in-app messages; to also fetch app-specific in-app messages, include a <code>packageName</code> and <code>platform</code> in the request. This endpoint returns new messages and messages that have already been saved to a mobile inbox, and each message has a <code>read</code> field to indicate whether or not it has already been seen.",
        "operationId" : "getMessages",
        "parameters" : [ {
          "name" : "email",
          "in" : "query",
          "description" : "The email address of the user for which to fetch in-app messages. Specify either an email or a userId.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "userId",
          "in" : "query",
          "description" : "The userId of the user for which to fetch in-app messages. Specify either an email or a userId.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of in-app messages to fetch.",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "platform",
          "in" : "query",
          "description" : "The platform of the app for which to retrieve selective in-app messages: iOS or Android (case-sensitive).",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "enum" : [ "iOS", "Android" ]
        }, {
          "name" : "SDKVersion",
          "in" : "query",
          "description" : "Iterable SDK version (e.g., 6.2.17)",
          "required" : false,
          "type" : "string",
          "default" : "None"
        }, {
          "name" : "packageName",
          "in" : "query",
          "description" : "The package name of the app for which to retrieve selective in-app messages.",
          "required" : false,
          "type" : "string",
          "default" : "None"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiInAppMessagesResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/channels" : {
      "get" : {
        "tags" : [ "channels" ],
        "summary" : "Get channels",
        "description" : "Get all message channels within the project. <b>Rate limit</b>: 100 requests/second, per project.",
        "operationId" : "channels",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ChannelsResponse"
            }
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/inApp/target" : {
      "post" : {
        "tags" : [ "In-app" ],
        "summary" : "Send an in-app notification to a user",
        "description" : "Send an in-app notification to a specific user. Request data fields will override user profile data fields. A reference to the user profile is provided via the 'profile' field, to help resolve field collisions.",
        "operationId" : "target",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Recipient and email id",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TargetInAppRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/inApp/cancel" : {
      "post" : {
        "tags" : [ "In-app" ],
        "summary" : "Cancel a scheduled in-app message",
        "description" : "Cancels the sending of a scheduled in-app message to a specific user.",
        "operationId" : "cancel",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Email and Campaign ID",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CancelScheduledMessageRequest - campaignId OR scheduledMessageId are required"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/metadata/{table}" : {
      "get" : {
        "tags" : [ "metadata" ],
        "summary" : "List keys in a table",
        "description" : "",
        "operationId" : "list",
        "parameters" : [ {
          "name" : "table",
          "in" : "path",
          "description" : "Table name [Alphanumeric, case insensitive]",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "nextMarker",
          "in" : "query",
          "description" : "next result set id; returned by previous search if more hits exist",
          "required" : false,
          "type" : "string",
          "default" : "None"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Listing"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      },
      "delete" : {
        "tags" : [ "metadata" ],
        "summary" : "Delete a table",
        "description" : "Asynchronous. Deletes the table. 200 response indicates a valid request that will be processed; table may not be deleted immediately. Use GET /api/metadata/{table} to verify completion.",
        "operationId" : "delete",
        "parameters" : [ {
          "name" : "table",
          "in" : "path",
          "description" : "Table name [Alphanumeric, case insensitive]",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/metadata/{table}/{key}" : {
      "get" : {
        "tags" : [ "metadata" ],
        "summary" : "Get the metadata value of a single key",
        "description" : "",
        "operationId" : "get",
        "parameters" : [ {
          "name" : "table",
          "in" : "path",
          "description" : "Table name [Alphanumeric, case insensitive]",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Metadata key [Alphanumeric, case sensitive]",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MetadataWithProperties"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "404" : {
            "description" : "No metadata at specified location"
          }
        }
      },
      "put" : {
        "tags" : [ "metadata" ],
        "summary" : "Create or replace metadata",
        "description" : "Asynchronous. Creates or replaces the item associated with the specified key. 200 response indicates a valid request that will be processed; updates may not be made immediately. Use GET /api/metadata/{table}/{key} to verify completion.",
        "operationId" : "put",
        "parameters" : [ {
          "name" : "table",
          "in" : "path",
          "description" : "Table name [Alphanumeric, case insensitive]",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Metadata key [Alphanumeric, case sensitive]",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Metadata properties",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PutMetadataRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      },
      "delete" : {
        "tags" : [ "metadata" ],
        "summary" : "Delete a single metadata key/value",
        "description" : "Asynchronous. Deletes the specified item from the table. 200 response indicates a valid request that will be processed; data may not be deleted immediately. Use GET /api/metadata/{table}/{key} to verify completion.",
        "operationId" : "delete",
        "parameters" : [ {
          "name" : "table",
          "in" : "path",
          "description" : "Table name [Alphanumeric, case insensitive]",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Metadata key [Alphanumeric, case sensitive]",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/metadata" : {
      "get" : {
        "tags" : [ "metadata" ],
        "summary" : "List available tables",
        "description" : "",
        "operationId" : "list tables",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ListMetadataTablesResponse"
            }
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/{email}" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Get a user by email (path parameter)",
        "description" : "Get a user by email address (passed as a path parameter).<br><br>If the email address contains non-alphanumeric characters, use <a href=\"#users_getUser_0\"><tt>GET /api/users/getByEmail</tt></a> instead.<br><br><b>Rate limit</b>: 3 requests/second, per project.",
        "operationId" : "getUser",
        "parameters" : [ {
          "name" : "email",
          "in" : "path",
          "description" : "email",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      },
      "delete" : {
        "tags" : [ "users" ],
        "summary" : "Delete a user by email",
        "description" : "Asynchronous. Delete a specific user by email address. <b>Rate limit</b>: 3 requests/second, per project.",
        "operationId" : "delete",
        "parameters" : [ {
          "name" : "email",
          "in" : "path",
          "description" : "email",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/getByEmail" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Get a user by email (query parameter)",
        "description" : "Get a user by email address (passed as a query parameter).<br><br>Returns the same data as <a href=\"#users_getUser\"><tt>GET /api/users/{email}</tt></a>, but supports email addresses that contain non-alphanumeric characters (which should be URL-encoded before being passed to this endpoint).<br><br><b>Rate limit</b>: 3 requests/second, per project.",
        "operationId" : "getUser",
        "parameters" : [ {
          "name" : "email",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/update" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Update user data",
        "description" : "Update user data or adds a user if none exists. Data is merged - missing fields are not deleted. Please note there is a soft limit (default: 1,000) on the number of unique fields users can have. Types of data fields must match the types sent in previous requests, across all data fields in the project.<br><b>Rate limit</b>: 500 requests/second, per project.",
        "operationId" : "updateUser",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "user object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ApiUserUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "409" : {
            "description" : "Contact is GDPR forgotten"
          }
        }
      }
    },
    "/api/users/byUserId" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Get a user by userId (query parameter)",
        "description" : "Get a user by userId (passed as a query parameter).<br><br>Returns the same data as <a href=\"#users_getUserById_0\"><tt>GET /api/users/byUserId/{userId}</tt></a>, but supports userId values that contain non-alphanumeric characters (which should be URL-encoded before being passed to this endpoint).<br><br><b>Rate limit</b>: 3 requests/second, per project.",
        "operationId" : "getUserById",
        "parameters" : [ {
          "name" : "userId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/byUserId/{userId}" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Get a user by userId (path parameter)",
        "description" : "Get a user by userId (passed as a path parameter).<br><br>If the userId contains non-alphanumeric characters, use <a href=\"#users_getUserById\"><tt>GET /api/users/byUserId</tt></a> instead.<br><br><b>Rate limit</b>: 3 requests/second, per project.",
        "operationId" : "getUserById",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "userId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      },
      "delete" : {
        "tags" : [ "users" ],
        "summary" : "Delete user by userId",
        "description" : "Asynchronous. Delete user by a userId. This will delete multiple users if they happen to share the same userId. <b>Rate limit</b>: 3 requests/second, per project.",
        "operationId" : "delete",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/bulkUpdate" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Bulk update user data",
        "description" : "Bulk update user data. This endpoint adds and overwrites user profile fields as needed. It does not modify top-level fields omitted from the request body. <br><br>If you'd like to merge (rather than overwrite) a user profile's top-level objects with the values provided for them in the request body, set <code>mergeNestedObjects</code> to <code>true</code>.<br><br>When updating an existing field, you cannot change its data type (the new value must have the same data type as the old value).<br><br>When adding a new field, remember that each project has a soft limit of 1,000 unique user profile fields (across all its users, with a field's uniqueness determined by its name and position on the user profile). <br><br>Iterable handles requests to this endpoint separately from requests to single-user endpoints (<code>update</code>, <code>updateEmail</code>, <code>updateSubscriptions</code>, etc.). For a given user, in a short period of time, only use single-user calls or bulk update calls. Otherwise, results may be inconsistent.<br><br>When updating the <code>emailListIds</code> field, this endpoint does not generate subscribe or unsubscribe events. The same is true for updates to <code>unsubscribedChannelIds</code> and <code>unsubscribedMessageTypeIds</code> (but these can only be updated by this endpoint in projects where the opt-in message types feature is not enabled).<br><br><b>Max size of request body</b>: 4MB<br><b>Rate limit</b>: 5 requests/second, per project",
        "operationId" : "bulkUpdateUser",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Users to update",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BulkUpdateUsersRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ListResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/updateSubscriptions" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Update user subscriptions",
        "description" : "Update user subscriptions. <b>NOTE</b>: Overwrites existing data if the field is provided and not null.",
        "operationId" : "updateSubscriptions",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Subscriptions to update",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UpdateSubscriptionsRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/bulkUpdateSubscriptions" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Bulk update user subscriptions",
        "description" : "<b>WARNING</b>: This will overwrite (instead of merging) existing data if the provided fields are not null.",
        "operationId" : "bulkUpdateSubscriptions",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Bulk subscriptions to update",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BulkUpdateSubscriptionsRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BulkUpdateSubscriptionsResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/updateEmail" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Update user email",
        "description" : "Change a user's email address. All profile data and events will be migrated to the new email address.",
        "operationId" : "updateEmail",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Update a user's email. All profile data and events will be migrated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UpdateEmailRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "409" : {
            "description" : "Contact is GDPR forgotten"
          }
        }
      }
    },
    "/api/users/getFields" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Get all user fields",
        "description" : "Get all user fields within a project. <b>Rate limit</b>: 3 requests/second, per project.",
        "operationId" : "getUserFields",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetUserFieldsResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/registerDeviceToken" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Register a device token for push",
        "description" : "Register a device token for push. This will add the data if it doesn't exist yet. It will also update data fields on the device. Data will be merged; missing fields are not deleted. Also, note that there is a soft limit on the number of unique fields a user can have (default is 1,000). Types of data fields must match the types sent in previous requests, across all data fields in the project.<br><b>Limits</b>: There is a limit of 500 devices per user profile. This API will return 400 error code if the user already has 500 devices or more.<br><b>Rate limit</b>: 500 requests/second, per project.",
        "operationId" : "registerDeviceToken",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Request to register device",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RegisterDeviceTokenRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/registerBrowserToken" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Register a browser token for web push",
        "description" : "There is a limit of 500 browser tokens per user profile. This API will return 400 error code if the user already has 500 tokens or more.",
        "operationId" : "registerBrowserToken",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Request to register browser",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RegisterBrowserTokenRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/disableDevice" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Disable pushes to a mobile device",
        "description" : "Manually disable push notifications to a device until it comes online again.",
        "operationId" : "disableDevice",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Request to disable device",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DisableDeviceRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/getSentMessages" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Get messages sent to a user",
        "description" : "Get messages sent to a user by email address or user ID. Returns 10 by default, up to 1,000. <b>Rate limit</b>: 3 requests/second, per project.",
        "operationId" : "getSentMessages",
        "parameters" : [ {
          "name" : "email",
          "in" : "query",
          "description" : "user's email, either email or userId must be specified",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "userId",
          "in" : "query",
          "description" : "user's userId, either email or userId must be specified",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "max number of messages to return (default: 10, max limit: 1000)",
          "required" : false,
          "type" : "integer",
          "default" : 10,
          "format" : "int32"
        }, {
          "name" : "campaignIds",
          "in" : "query",
          "description" : "only include messages from these campaigns",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "object"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "startDateTime",
          "in" : "query",
          "description" : "start date time (yyyy-MM-dd HH:mm:ss ZZ)",
          "required" : false,
          "type" : "string",
          "format" : "date-time"
        }, {
          "name" : "endDateTime",
          "in" : "query",
          "description" : "end date time (yyyy-MM-dd HH:mm:ss ZZ)",
          "required" : false,
          "type" : "string",
          "format" : "date-time"
        }, {
          "name" : "excludeBlastCampaigns",
          "in" : "query",
          "description" : "exclude results coming from blast campaigns (ignored if campaignId is set)",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "messageMedium",
          "in" : "query",
          "description" : "only include messages of this type",
          "required" : false,
          "type" : "string",
          "enum" : [ "Email", "Push", "InApp", "SMS" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetSentMessagesResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/webPush/target" : {
      "post" : {
        "tags" : [ "webPush" ],
        "summary" : "Send web push notification to user",
        "description" : "Send a web push notification to a specific user. Request data fields will override user profile data fields. A reference to the user profile is provided via the 'profile' field, to help resolve field collisions.",
        "operationId" : "target",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Recipient and email id",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TargetWebPushRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/webPush/cancel" : {
      "post" : {
        "tags" : [ "webPush" ],
        "summary" : "Cancel a web push notification to a user",
        "description" : "Cancel a web push notification to a specific user. Must include either an email address AND campaignId, or just a scheduledMessageId.",
        "operationId" : "cancel",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Email and Campaign ID",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CancelScheduledMessageRequest - campaignId OR scheduledMessageId are required"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IterableApiResponse"
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    }
  },
  "securityDefinitions" : {
    "api_key" : {
      "type" : "apiKey",
      "name" : "Api-Key",
      "in" : "header"
    }
  },
  "definitions" : {
    "IterableApiResponse" : {
      "type" : "object",
      "required" : [ "code", "msg" ],
      "properties" : {
        "msg" : {
          "type" : "string",
          "description" : "Response description"
        },
        "code" : {
          "type" : "string",
          "enum" : [ "Success", "BadApiKey", "BadParams", "BadJsonBody", "QueueEmailError", "GenericError", "InvalidEmailAddressError", "DatabaseError", "EmailAlreadyExists", "Forbidden" ]
        },
        "params" : {
          "type" : "object",
          "description" : "Additional info"
        }
      }
    },
    "BulkSubscriptionActionRequest" : {
      "type" : "object",
      "properties" : {
        "users" : {
          "type" : "array",
          "description" : "List of user emails to update with subscription action",
          "items" : {
            "type" : "string"
          }
        },
        "usersByUserId" : {
          "type" : "array",
          "description" : "List of user userIds to update with subscription action",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ApiWebhookResponse" : {
      "type" : "object",
      "required" : [ "authType", "blastSendEnabled", "enabled", "endpoint", "id", "triggeredSendEnabled" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Webhook ID"
        },
        "enabled" : {
          "type" : "boolean",
          "description" : "Enabled"
        },
        "endpoint" : {
          "type" : "string",
          "description" : "Endpoint"
        },
        "authType" : {
          "type" : "string",
          "description" : "Auth type"
        },
        "triggeredSendEnabled" : {
          "type" : "boolean",
          "description" : "Triggered Send Enabled"
        },
        "blastSendEnabled" : {
          "type" : "boolean",
          "description" : "Blast Send Enabled"
        }
      }
    },
    "ApiWebhookModel" : {
      "type" : "object",
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Webhook ID"
        },
        "enabled" : {
          "type" : "boolean",
          "description" : "Enabled"
        },
        "endpoint" : {
          "type" : "string",
          "description" : "Endpoint"
        },
        "authType" : {
          "type" : "string",
          "description" : "Auth type",
          "enum" : [ "NoAuth", "Basic", "OAuth2" ]
        },
        "authToken" : {
          "type" : "string",
          "description" : "Auth token"
        },
        "headers" : {
          "type" : "array",
          "description" : "Headers",
          "items" : {
            "$ref" : "#/definitions/LinkParam"
          }
        },
        "triggeredSendEnabled" : {
          "type" : "boolean",
          "description" : "Triggered Send Enabled"
        },
        "blastSendEnabled" : {
          "type" : "boolean",
          "description" : "Blast Send Enabled"
        }
      }
    },
    "LinkParam" : {
      "type" : "object",
      "required" : [ "key", "value" ],
      "properties" : {
        "key" : {
          "type" : "string",
          "description" : "Link parameter key"
        },
        "value" : {
          "type" : "string",
          "description" : "Link parameter value"
        }
      }
    },
    "GetWebhooksResponse" : {
      "type" : "object",
      "required" : [ "webhooks" ],
      "properties" : {
        "webhooks" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiWebhookResponse"
          }
        }
      }
    },
    "ApiUserUpdateRequest" : {
      "type" : "object",
      "properties" : {
        "email" : {
          "type" : "string",
          "description" : "Either email or userId must be passed in to identify the user. If both are passed in, email takes precedence."
        },
        "dataFields" : {
          "type" : "object",
          "description" : "Data fields to store in the user profile"
        },
        "userId" : {
          "type" : "string",
          "description" : "Optional userId, typically your database generated id. Either email or userId must be specified."
        },
        "preferUserId" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Create a new user with the specified userId if the user does not exist yet."
        },
        "mergeNestedObjects" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Merge top level objects instead of overwriting (default: false). e.g. if user profile has data: {mySettings:{mobile:true}} and change contact field has data: {mySettings:{email:true}}, the resulting profile: {mySettings:{mobile:true,email:true}}"
        }
      }
    },
    "CommerceItem" : {
      "type" : "object",
      "required" : [ "id", "name", "price", "quantity" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Unique product identifier"
        },
        "sku" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "categories" : {
          "type" : "array",
          "description" : "Categories this product belongs to. It can belong to multiple categories. Each category is a breadcrumb in list form.",
          "items" : {
            "type" : "string"
          }
        },
        "price" : {
          "type" : "number",
          "format" : "double"
        },
        "quantity" : {
          "type" : "integer",
          "format" : "int64"
        },
        "imageUrl" : {
          "type" : "string",
          "description" : "URL to an image of the item."
        },
        "url" : {
          "type" : "string",
          "description" : "URL to the item."
        },
        "dataFields" : {
          "type" : "object",
          "description" : "Additional item properties"
        }
      }
    },
    "UpdateCartRequest" : {
      "type" : "object",
      "required" : [ "items", "user" ],
      "properties" : {
        "user" : {
          "$ref" : "#/definitions/ApiUserUpdateRequest"
        },
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CommerceItem"
          }
        }
      }
    },
    "TrackPurchaseRequest" : {
      "type" : "object",
      "required" : [ "items", "total", "user" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Optional purchase id. If a purchase exists with that id, the purchase will be updated. If none is specified, a new id will automatically be generated and returned. Note that this ID cannot be longer than 512 bytes."
        },
        "user" : {
          "$ref" : "#/definitions/ApiUserUpdateRequest"
        },
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CommerceItem"
          }
        },
        "campaignId" : {
          "type" : "integer",
          "format" : "int32"
        },
        "templateId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Used in AB testing attribution"
        },
        "total" : {
          "type" : "number",
          "format" : "double",
          "description" : "Total order dollar amount"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Time event happened. Set to the time event was received if unspecified. Expects a Unix timestamp."
        },
        "dataFields" : {
          "type" : "object",
          "description" : "Additional fields to be tracked."
        }
      }
    },
    "TargetPushRequest" : {
      "type" : "object",
      "required" : [ "campaignId" ],
      "properties" : {
        "campaignId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Campaign ID"
        },
        "recipientEmail" : {
          "type" : "string",
          "description" : "Either email or userId must be passed in to identify the user. If both are passed in, email takes precedence."
        },
        "recipientUserId" : {
          "type" : "string",
          "description" : "UserId that was passed into the updateUser call"
        },
        "dataFields" : {
          "type" : "object",
          "description" : "JSON object containing fields to merge into email template"
        },
        "sendAt" : {
          "type" : "string",
          "description" : "Schedule the message for up to 365 days in the future. If set in the past, message is sent immediately. Format is YYYY-MM-DD HH:MM:SS in UTC"
        },
        "allowRepeatMarketingSends" : {
          "type" : "boolean",
          "description" : "Allow repeat marketing sends? Defaults to true."
        },
        "metadata" : {
          "type" : "object",
          "description" : "Metadata to pass back via system webhooks. Not used for rendering"
        }
      }
    },
    "CancelScheduledMessageRequest - campaignId OR scheduledMessageId are required" : {
      "type" : "object",
      "properties" : {
        "email" : {
          "type" : "string",
          "description" : "If campaignId, either email or userId must be passed in to identify the user. If both are passed in, email takes precedence."
        },
        "campaignId" : {
          "type" : "number",
          "description" : "If campaignId, email or userId is required."
        },
        "scheduledMessageId" : {
          "type" : "number"
        },
        "userId" : {
          "type" : "string",
          "description" : "Optional userId, typically your database generated id. If campaignId, either email or userId must be specified."
        }
      }
    },
    "ExperimentMetricsResponse" : {
      "type" : "object",
      "properties" : {
        "headers" : {
          "type" : "string"
        },
        "rows" : {
          "type" : "array",
          "description" : "Rows of the report.",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "CreateListResponse" : {
      "type" : "object",
      "required" : [ "listId" ],
      "properties" : {
        "listId" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "CreateListRequest" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string"
        }
      }
    },
    "GetListsResponse" : {
      "type" : "object",
      "required" : [ "lists" ],
      "properties" : {
        "lists" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ListDetails"
          }
        }
      }
    },
    "ListDetails" : {
      "type" : "object",
      "required" : [ "createdAt", "id", "listType", "name" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Creation timestamp as epoch time in milliseconds"
        },
        "listType" : {
          "type" : "string",
          "enum" : [ "Standard", "Dynamic", "Suppression", "Internal" ]
        }
      }
    },
    "ListResponse" : {
      "type" : "object",
      "required" : [ "failCount", "successCount" ],
      "properties" : {
        "successCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "failCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "invalidEmails" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "invalidUserIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "OptionalApiUser" : {
      "type" : "object",
      "properties" : {
        "email" : {
          "type" : "string",
          "description" : "An email must be set unless a profile already exists with a userId set. In which case, a lookup from userId to email is performed."
        },
        "dataFields" : {
          "type" : "object"
        },
        "userId" : {
          "type" : "string",
          "description" : "Optional userId, typically your database generated id. Either email or userId must be specified."
        },
        "preferUserId" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Create a new user with the specified userId if the user does not exist yet."
        },
        "mergeNestedObjects" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Merge top level objects instead of overwriting (default: false). e.g. if user profile has data: {mySettings:{mobile:true}} and change contact field has data: {mySettings:{email:true}}, the resulting profile: {mySettings:{mobile:true,email:true}}"
        }
      }
    },
    "SubscribeRequest" : {
      "type" : "object",
      "required" : [ "listId", "subscribers" ],
      "properties" : {
        "listId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "subscribers" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OptionalApiUser"
          }
        }
      }
    },
    "UnsubscribeRequest" : {
      "type" : "object",
      "required" : [ "listId", "subscribers" ],
      "properties" : {
        "listId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "subscribers" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Unsubscriber"
          }
        },
        "campaignId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "attribute unsubscribe to a campaign"
        },
        "channelUnsubscribe" : {
          "type" : "boolean",
          "description" : "Unsubscribe email from list's associated channel - essentially a global unsubscribe. (default: false)"
        }
      }
    },
    "Unsubscriber" : {
      "type" : "object",
      "properties" : {
        "email" : {
          "type" : "string"
        },
        "userId" : {
          "type" : "string"
        }
      }
    },
    "TriggerCampaignRequest" : {
      "type" : "object",
      "required" : [ "campaignId", "listIds" ],
      "properties" : {
        "campaignId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "listIds" : {
          "type" : "array",
          "description" : "A non-empty array of list IDs to send to",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "suppressionListIds" : {
          "type" : "array",
          "description" : "Lists to suppress",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "dataFields" : {
          "type" : "object",
          "description" : "Fields to merge into handlebars context"
        },
        "allowRepeatMarketingSends" : {
          "type" : "boolean",
          "description" : "Allow repeat marketing sends? Defaults to true."
        }
      }
    },
    "CreateCampaignResponse" : {
      "type" : "object",
      "required" : [ "campaignId" ],
      "properties" : {
        "campaignId" : {
          "type" : "number"
        }
      }
    },
    "CreateCampaignRequest" : {
      "type" : "object",
      "required" : [ "listIds", "name", "templateId" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "listIds" : {
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "templateId" : {
          "type" : "number"
        },
        "suppressionListIds" : {
          "type" : "array",
          "description" : "Optional ids of lists of users that this campaign should not send emails to",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "sendAt" : {
          "type" : "string",
          "description" : "When to send the message up to 7 days in the future. If in the past, email is sent immediately. Format is YYYY-MM-DD HH:MM:SS in UTC"
        },
        "sendMode" : {
          "type" : "string",
          "description" : "Send campaign based on project time zone or recipient time zone",
          "enum" : [ "ProjectTimeZone", "RecipientTimeZone" ]
        },
        "startTimeZone" : {
          "type" : "string",
          "description" : "The starting time zone in for recipient time zone-based sends in IANA format (e.g. America/New_York, America/Los_Angeles, etc)"
        },
        "defaultTimeZone" : {
          "type" : "string",
          "description" : "The fallback time zone for recipient time zone-based sends if the recipient does not have time zone set in IANA format (e.g. America/New_York, America/Los_Angeles, etc)"
        },
        "dataFields" : {
          "type" : "object",
          "description" : "JSON object with additional data used to render data feed fields in specified template"
        }
      }
    },
    "CampaignIdRequest" : {
      "type" : "object",
      "required" : [ "campaignId" ],
      "properties" : {
        "campaignId" : {
          "type" : "number"
        }
      }
    },
    "CampaignDetails" : {
      "type" : "object",
      "required" : [ "campaignState", "createdAt", "createdByUserId", "id", "messageMedium", "name", "type", "updatedAt" ],
      "properties" : {
        "id" : {
          "type" : "number"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Creation timestamp as epoch time in milliseconds"
        },
        "updatedAt" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Last update timestamp as epoch time in milliseconds"
        },
        "startAt" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Start timestamp as epoch time in milliseconds"
        },
        "endedAt" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Ended timestamp as epoch time in milliseconds"
        },
        "name" : {
          "type" : "string"
        },
        "templateId" : {
          "type" : "number"
        },
        "messageMedium" : {
          "type" : "string"
        },
        "createdByUserId" : {
          "type" : "string"
        },
        "updatedByUserId" : {
          "type" : "string"
        },
        "campaignState" : {
          "type" : "string",
          "enum" : [ "Draft", "Ready", "Scheduled", "Running", "Finished", "Starting", "Aborted", "Recurring" ]
        },
        "listIds" : {
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "suppressionListIds" : {
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "sendSize" : {
          "type" : "number"
        },
        "recurringCampaignId" : {
          "type" : "number"
        },
        "workflowId" : {
          "type" : "number"
        },
        "labels" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "type" : {
          "type" : "string",
          "enum" : [ "Blast", "Triggered" ]
        }
      }
    },
    "CampaignsResponse" : {
      "type" : "object",
      "required" : [ "campaigns" ],
      "properties" : {
        "campaigns" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CampaignDetails"
          }
        }
      }
    },
    "TriggerWorkflowRequest" : {
      "type" : "object",
      "required" : [ "workflowId" ],
      "properties" : {
        "email" : {
          "type" : "string",
          "description" : "Trigger workflow for given email address. Trigger only with email, userId, OR listId (see below)"
        },
        "userId" : {
          "type" : "string",
          "description" : "Trigger workflow for given userId. Trigger only with email, userId OR listId (see below)"
        },
        "workflowId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Id of workflow to trigger"
        },
        "dataFields" : {
          "type" : "object",
          "description" : "Additional data associated triggering event"
        },
        "listId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "(Optional) Trigger the workflow for all users in a list (standard or dynamic)"
        }
      }
    },
    "BulkTrackResponse" : {
      "type" : "object",
      "required" : [ "failCount", "successCount" ],
      "properties" : {
        "successCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "failCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "invalidEmails" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "invalidUserIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "disallowedEventNames" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "BulkTrackRequest" : {
      "type" : "object",
      "required" : [ "events" ],
      "properties" : {
        "events" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TrackRequest"
          }
        }
      }
    },
    "TrackRequest" : {
      "type" : "object",
      "required" : [ "eventName" ],
      "properties" : {
        "email" : {
          "type" : "string",
          "description" : "Either email or userId must be passed in to identify the user. If both are passed in, email takes precedence."
        },
        "eventName" : {
          "type" : "string",
          "description" : "Name of event"
        },
        "id" : {
          "type" : "string",
          "description" : "Optional event id. If an event exists with that id, the event will be updated. If none is specified, a new id will automatically be generated and returned. Note that this ID cannot be longer than 512 bytes."
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Time event happened. Set to the time event was received if unspecified. Expects a unix timestamp."
        },
        "dataFields" : {
          "type" : "object",
          "description" : "Additional data associated with event (i.e. item amount, item quantity). For events of the same name, identically named data fields must be of the same type."
        },
        "userId" : {
          "type" : "string",
          "description" : "userId that was passed into the updateUser call"
        },
        "campaignId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Campaign tied to conversion"
        },
        "templateId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Template id"
        }
      }
    },
    "WebPushClickEventRequest" : {
      "type" : "object",
      "required" : [ "messageId" ],
      "properties" : {
        "email" : {
          "type" : "string",
          "description" : "Either email or userId must be passed in to identify the user. If both are passed in, email takes precedence."
        },
        "userId" : {
          "type" : "string",
          "description" : "userId that was passed into the updateUser call"
        },
        "messageId" : {
          "type" : "string"
        },
        "campaignId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "templateId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Time event happened. Set to the time event was received if unspecified. Expects a Unix timestamp."
        }
      }
    },
    "TrackPushOpenRequest" : {
      "type" : "object",
      "required" : [ "campaignId", "messageId" ],
      "properties" : {
        "email" : {
          "type" : "string",
          "description" : "Either email or userId must be passed in to identify the user. If both are passed in, email takes precedence."
        },
        "userId" : {
          "type" : "string",
          "description" : "userId that was passed into the updateUser call"
        },
        "campaignId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Campaign tied to open"
        },
        "templateId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Used in AB testing attribution"
        },
        "messageId" : {
          "type" : "string",
          "description" : "Iterable-generated Message ID"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Timestamp of the open event. If unspecified, set to the time event was received  Expects a unix timestamp."
        },
        "dataFields" : {
          "type" : "object",
          "description" : "Additional data associated with event"
        }
      }
    },
    "DeviceInfo" : {
      "type" : "object",
      "properties" : {
        "deviceId" : {
          "type" : "string",
          "description" : "The device's unique identifier"
        },
        "platform" : {
          "type" : "string",
          "description" : "The mobile device’s platform (case-sensitive)",
          "enum" : [ "iOS", "Android" ]
        },
        "appPackageName" : {
          "type" : "string",
          "description" : "The package name of the app"
        }
      }
    },
    "InAppOpenRequest" : {
      "type" : "object",
      "required" : [ "messageId" ],
      "properties" : {
        "email" : {
          "type" : "string",
          "description" : "Either email or userId must be passed in to identify the user. If both are passed in, email takes precedence."
        },
        "userId" : {
          "type" : "string",
          "description" : "userId that was passed into the updateUser call"
        },
        "messageId" : {
          "type" : "string",
          "description" : "The ID of the message associated with the event"
        },
        "messageContext" : {
          "description" : "An object containing various fields that describe the message associated with the event",
          "$ref" : "#/definitions/InboxMessageContext"
        },
        "deviceInfo" : {
          "description" : "An object containing various fields that describe the device and app associated with the event",
          "$ref" : "#/definitions/DeviceInfo"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Time event happened. Set to the time event was received if unspecified. Expects a Unix timestamp."
        }
      }
    },
    "InboxMessageContext" : {
      "type" : "object",
      "properties" : {
        "saveToInbox" : {
          "type" : "boolean",
          "description" : "Whether or not the message associated with the event was configured to be stored in the inbox"
        },
        "silentInbox" : {
          "type" : "boolean",
          "description" : "Whether or not the message associated with the event was configured to send directly to the inbox"
        },
        "location" : {
          "type" : "string",
          "description" : "(for example, in-app, inbox or another custom value)"
        }
      }
    },
    "InAppClickRequest" : {
      "type" : "object",
      "required" : [ "messageId" ],
      "properties" : {
        "email" : {
          "type" : "string",
          "description" : "Either email or userId must be passed in to identify the user. If both are passed in, email takes precedence."
        },
        "userId" : {
          "type" : "string",
          "description" : "userId that was passed into the updateUser call"
        },
        "messageId" : {
          "type" : "string",
          "description" : "The ID of the message associated with the event"
        },
        "clickedUrl" : {
          "type" : "string",
          "description" : "The URL of the clicked link/button"
        },
        "messageContext" : {
          "description" : "An object containing various fields that describe the message associated with the event",
          "$ref" : "#/definitions/InboxMessageContext"
        },
        "deviceInfo" : {
          "description" : "An object containing various fields that describe the device and app associated with the event",
          "$ref" : "#/definitions/DeviceInfo"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Time event happened. Set to the time event was received if unspecified. Expects a Unix timestamp."
        }
      }
    },
    "InAppDeliveryRequest" : {
      "type" : "object",
      "required" : [ "messageId" ],
      "properties" : {
        "email" : {
          "type" : "string",
          "description" : "Either email or userId must be passed in to identify the user. If both are passed in, email takes precedence."
        },
        "userId" : {
          "type" : "string",
          "description" : "userId that was passed into the updateUser call"
        },
        "messageId" : {
          "type" : "string",
          "description" : "The ID of the message associated with the event"
        },
        "messageContext" : {
          "description" : "An object containing various fields that describe the message associated with the event",
          "$ref" : "#/definitions/MessageContext"
        },
        "deviceInfo" : {
          "description" : "An object containing various fields that describe the device and app associated with the event",
          "$ref" : "#/definitions/DeviceInfo"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Time event happened. Set to the time event was received if unspecified. Expects a Unix timestamp."
        }
      }
    },
    "MessageContext" : {
      "type" : "object",
      "properties" : {
        "saveToInbox" : {
          "type" : "boolean",
          "description" : "Whether or not the message associated with the event was configured to use the inbox"
        },
        "silentInbox" : {
          "type" : "boolean",
          "description" : "Whether or not the message associated with the event was configured to send directly to the inbox"
        }
      }
    },
    "InAppCloseRequest" : {
      "type" : "object",
      "required" : [ "messageId" ],
      "properties" : {
        "email" : {
          "type" : "string",
          "description" : "Either email or userId must be passed in to identify the user. If both are passed in, email takes precedence."
        },
        "userId" : {
          "type" : "string",
          "description" : "userId that was passed into the updateUser call"
        },
        "messageId" : {
          "type" : "string",
          "description" : "The ID of the message associated with the event"
        },
        "clickedUrl" : {
          "type" : "string",
          "description" : "url used to close the in-app"
        },
        "messageContext" : {
          "description" : "An object containing various fields that describe the message associated with the event",
          "$ref" : "#/definitions/InboxMessageContext"
        },
        "closeAction" : {
          "type" : "string",
          "description" : "The type of action that initiated the close (for example, link, back or another custom value)"
        },
        "deviceInfo" : {
          "description" : "An object containing various fields that describe the device and app associated with the event",
          "$ref" : "#/definitions/DeviceInfo"
        },
        "inboxSessionId" : {
          "type" : "string",
          "description" : "Inbox SessionId"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Time event happened. Set to the time event was received if unspecified. Expects a Unix timestamp."
        }
      }
    },
    "InAppConsumeRequest" : {
      "type" : "object",
      "required" : [ "messageId" ],
      "properties" : {
        "email" : {
          "type" : "string",
          "description" : "Either email or userId must be passed in to identify the user. If both are passed in, email takes precedence."
        },
        "userId" : {
          "type" : "string",
          "description" : "userId that was passed into the updateUser call"
        },
        "messageId" : {
          "type" : "string",
          "description" : "The ID of the message associated with the event"
        },
        "messageContext" : {
          "description" : "An object containing various fields that describe the message associated with the event",
          "$ref" : "#/definitions/InboxMessageContext"
        },
        "deleteAction" : {
          "type" : "string",
          "description" : "How the message was deleted (for example, inbox-swipe, delete-action or another custom value)"
        },
        "deviceInfo" : {
          "description" : "An object containing various fields that describe the device and app associated with the event",
          "$ref" : "#/definitions/DeviceInfo"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Time event happened. Set to the time event was received if unspecified. Expects a Unix timestamp."
        }
      }
    },
    "GetEventsResponse" : {
      "type" : "object",
      "required" : [ "events" ],
      "properties" : {
        "events" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        }
      }
    },
    "TargetSMSRequest" : {
      "type" : "object",
      "required" : [ "campaignId" ],
      "properties" : {
        "campaignId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Campaign ID"
        },
        "recipientEmail" : {
          "type" : "string",
          "description" : "Either email or userId must be passed in to identify the user. If both are passed in, email takes precedence."
        },
        "recipientUserId" : {
          "type" : "string",
          "description" : "UserId that was passed into the updateUser call"
        },
        "dataFields" : {
          "type" : "object",
          "description" : "Fields to merge into template"
        },
        "sendAt" : {
          "type" : "string",
          "description" : "Schedule the message for up to 365 days in the future. If set in the past, message is sent immediately. Format is YYYY-MM-DD HH:MM:SS in UTC"
        },
        "allowRepeatMarketingSends" : {
          "type" : "boolean",
          "description" : "Allow repeat marketing sends? Defaults to true."
        }
      }
    },
    "TargetEmailRequest" : {
      "type" : "object",
      "required" : [ "campaignId" ],
      "properties" : {
        "campaignId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Campaign ID"
        },
        "recipientEmail" : {
          "type" : "string",
          "description" : "Either email or userId must be passed in to identify the user. If both are passed in, email takes precedence."
        },
        "recipientUserId" : {
          "type" : "string",
          "description" : "UserId that was passed into the updateUser call"
        },
        "dataFields" : {
          "type" : "object",
          "description" : "Fields to merge into email template"
        },
        "sendAt" : {
          "type" : "string",
          "description" : "Schedule the message for up to 365 days in the future. If set in the past, email is sent immediately. Format is YYYY-MM-DD HH:MM:SS in UTC"
        },
        "allowRepeatMarketingSends" : {
          "type" : "boolean",
          "description" : "Allow repeat marketing sends? Defaults to true."
        },
        "metadata" : {
          "type" : "object",
          "description" : "Metadata to pass back via webhooks. Not used for rendering"
        }
      }
    },
    "CatalogItemWithProperties" : {
      "type" : "object",
      "required" : [ "catalogName", "itemId", "lastModified", "size", "value" ],
      "properties" : {
        "catalogName" : {
          "type" : "string"
        },
        "itemId" : {
          "type" : "string"
        },
        "size" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastModified" : {
          "type" : "string",
          "format" : "date-time"
        },
        "value" : {
          "$ref" : "#/definitions/JsObject"
        }
      }
    },
    "JsObject" : {
      "type" : "object",
      "required" : [ "fields", "underlying", "value" ],
      "properties" : {
        "underlying" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/JsValue"
          }
        },
        "fields" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Tuple2StringJsValue"
          }
        },
        "value" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/JsValue"
          }
        }
      }
    },
    "JsValue" : {
      "type" : "object"
    },
    "Tuple2" : {
      "type" : "object",
      "required" : [ "_1", "_2" ],
      "properties" : {
        "_1" : {
          "type" : "object"
        },
        "_2" : {
          "type" : "object"
        }
      }
    },
    "Tuple2StringJsValue" : {
      "type" : "object",
      "required" : [ "_1", "_2" ],
      "properties" : {
        "_1" : {
          "type" : "string"
        },
        "_2" : {
          "$ref" : "#/definitions/JsValue"
        }
      }
    },
    "CatalogIndexItemRequest" : {
      "type" : "object",
      "required" : [ "value" ],
      "properties" : {
        "value" : {
          "type" : "object",
          "description" : "JSON representation of the catalog item. Max size is is 30kb."
        }
      }
    },
    "CatalogUpdateItemRequest" : {
      "type" : "object",
      "required" : [ "update" ],
      "properties" : {
        "update" : {
          "type" : "object",
          "description" : "JSON representation of the catalog item fields to update.  Max size is is 30kb."
        }
      }
    },
    "GetCatalogItemsResponse" : {
      "type" : "object",
      "required" : [ "catalogItemsWithProperties", "totalItemsCount" ],
      "properties" : {
        "catalogItemsWithProperties" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CatalogItemWithProperties"
          }
        },
        "totalItemsCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "nextPageUrl" : {
          "type" : "string"
        },
        "previousPageUrl" : {
          "type" : "string"
        }
      }
    },
    "CatalogBulkUploadRequest" : {
      "type" : "object",
      "required" : [ "documents", "replaceUploadedFieldsOnly" ],
      "properties" : {
        "documents" : {
          "type" : "object",
          "description" : "Json map of id to values. Max number of pairs in list is 1000. Max size of each json value is is 30kb."
        },
        "replaceUploadedFieldsOnly" : {
          "type" : "boolean",
          "description" : "Whether to replace only the upload fields within each document, not each entire document"
        }
      }
    },
    "CatalogBulkDeleteRequest" : {
      "type" : "object",
      "required" : [ "itemIds" ],
      "properties" : {
        "itemIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "CatalogName" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string"
        }
      }
    },
    "GetCatalogsResponse" : {
      "type" : "object",
      "required" : [ "catalogNames", "totalCatalogsCount" ],
      "properties" : {
        "catalogNames" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CatalogName"
          }
        },
        "totalCatalogsCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "previousPageUrl" : {
          "type" : "string"
        },
        "nextPageUrl" : {
          "type" : "string"
        }
      }
    },
    "CatalogFieldMappingsResponse" : {
      "type" : "object",
      "required" : [ "definedMappings", "undefinedFields" ],
      "properties" : {
        "definedMappings" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "undefinedFields" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "CatalogFieldDefinitionSerializedModel" : {
      "type" : "object",
      "required" : [ "fieldName", "fieldType" ],
      "properties" : {
        "fieldName" : {
          "type" : "string"
        },
        "fieldType" : {
          "type" : "string"
        },
        "children" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CatalogFieldDefinitionSerializedModel"
          }
        }
      }
    },
    "CatalogMappingsUpdateRequest" : {
      "type" : "object",
      "required" : [ "mappingsUpdates" ],
      "properties" : {
        "mappingsUpdates" : {
          "type" : "array",
          "description" : "mappingsUpdates",
          "items" : {
            "$ref" : "#/definitions/CatalogFieldDefinitionSerializedModel"
          }
        }
      }
    },
    "MessageTypeDetails" : {
      "type" : "object",
      "required" : [ "channelId", "id", "name" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string"
        },
        "channelId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Channel that this message type belongs to"
        }
      }
    },
    "MessageTypesResponse" : {
      "type" : "object",
      "required" : [ "messageTypes" ],
      "properties" : {
        "messageTypes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MessageTypeDetails"
          }
        }
      }
    },
    "ApiTemplateEntry" : {
      "type" : "object",
      "required" : [ "templateId" ],
      "properties" : {
        "templateId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Template ID"
        },
        "campaignId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "ID of campaign using this template"
        },
        "locales" : {
          "type" : "array",
          "description" : "Locales with content for this template",
          "items" : {
            "$ref" : "#/definitions/string"
          }
        }
      }
    },
    "ClientTemplateIdResponse" : {
      "type" : "object",
      "required" : [ "templates" ],
      "properties" : {
        "templates" : {
          "type" : "array",
          "description" : "Templates that match client template id",
          "items" : {
            "$ref" : "#/definitions/ApiTemplateEntry"
          }
        }
      }
    },
    "string" : {
      "type" : "object",
      "required" : [ "country", "displayLanguage", "languageTag" ],
      "properties" : {
        "languageTag" : {
          "type" : "string"
        },
        "country" : {
          "type" : "string"
        },
        "displayLanguage" : {
          "type" : "string"
        }
      }
    },
    "ApiEmailTemplateModel" : {
      "type" : "object",
      "required" : [ "templateId" ],
      "properties" : {
        "templateId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Email Template ID"
        },
        "metadata" : {
          "description" : "Metadata",
          "$ref" : "#/definitions/ApiTemplateResponse"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the template"
        },
        "fromName" : {
          "type" : "string",
          "description" : "From name"
        },
        "fromEmail" : {
          "type" : "string",
          "description" : "From email (must be an authorized sender)"
        },
        "replyToEmail" : {
          "type" : "string",
          "description" : "Reply to email"
        },
        "subject" : {
          "type" : "string",
          "description" : "Subject"
        },
        "preheaderText" : {
          "type" : "string",
          "description" : "Preheader text"
        },
        "ccEmails" : {
          "type" : "array",
          "description" : "CC emails",
          "items" : {
            "type" : "string"
          }
        },
        "bccEmails" : {
          "type" : "array",
          "description" : "BCC emails",
          "items" : {
            "type" : "string"
          }
        },
        "html" : {
          "type" : "string",
          "description" : "HTML contents"
        },
        "plainText" : {
          "type" : "string",
          "description" : "Plain text contents"
        },
        "googleAnalyticsCampaignName" : {
          "type" : "string",
          "description" : "Google analytics utm_campaign value"
        },
        "linkParams" : {
          "type" : "array",
          "description" : "Parameters to append to each URL in html contents",
          "items" : {
            "$ref" : "#/definitions/LinkParam"
          }
        },
        "dataFeedId" : {
          "type" : "number",
          "description" : "[Deprecated - use dataFeedIds instead] Id for data feed used in template rendering"
        },
        "dataFeedIds" : {
          "type" : "array",
          "description" : "Ids for data feeds used in template rendering",
          "items" : {
            "type" : "number"
          }
        },
        "cacheDataFeed" : {
          "type" : "object",
          "description" : "Cache data feed lookups for 1 hour"
        },
        "mergeDataFeedContext" : {
          "type" : "object",
          "description" : "Merge data feed contents into user context, so fields be referenced by {{field}} instead of [[field]]"
        },
        "clientTemplateId" : {
          "type" : "string",
          "description" : "Client template Id. Used as a secondary key to reference the template"
        },
        "locale" : {
          "type" : "string",
          "description" : "The locale for the content in this request. Leave empty for default locale. Iterable will automatically send the content with locale that matches a 'locale' field in the user profile."
        },
        "messageTypeId" : {
          "type" : "number",
          "description" : "Message Type Id"
        },
        "creatorUserId" : {
          "type" : "string",
          "description" : "Creator User Id"
        }
      }
    },
    "ApiTemplateResponse" : {
      "type" : "object",
      "required" : [ "createdAt", "creatorUserId", "messageTypeId", "name", "templateId", "updatedAt" ],
      "properties" : {
        "templateId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Template ID"
        },
        "createdAt" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date created"
        },
        "updatedAt" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date last updated"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the template"
        },
        "creatorUserId" : {
          "type" : "string",
          "description" : "Creator email"
        },
        "messageTypeId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Message type ID"
        },
        "campaignId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Campaign ID"
        },
        "clientTemplateId" : {
          "type" : "string",
          "description" : "Client template ID. Used as a secondary key to reference the template"
        }
      }
    },
    "MessageMedium" : {
      "type" : "object"
    },
    "UpsertEmailTemplateModel" : {
      "type" : "object",
      "required" : [ "clientTemplateId", "messageMedium" ],
      "properties" : {
        "clientTemplateId" : {
          "type" : "string",
          "description" : "Id used by the client to identify a template. If multiple templates exist with the Id, all will be updated"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the template"
        },
        "fromName" : {
          "type" : "string",
          "description" : "From name"
        },
        "fromEmail" : {
          "type" : "string",
          "description" : "From email (must be an authorized sender)"
        },
        "replyToEmail" : {
          "type" : "string",
          "description" : "Reply to email"
        },
        "subject" : {
          "type" : "string",
          "description" : "Subject"
        },
        "preheaderText" : {
          "type" : "string",
          "description" : "Preheader text"
        },
        "ccEmails" : {
          "type" : "array",
          "description" : "CC emails",
          "items" : {
            "type" : "string"
          }
        },
        "bccEmails" : {
          "type" : "array",
          "description" : "BCC emails",
          "items" : {
            "type" : "string"
          }
        },
        "html" : {
          "type" : "string",
          "description" : "HTML contents"
        },
        "plainText" : {
          "type" : "string",
          "description" : "Plain text contents"
        },
        "googleAnalyticsCampaignName" : {
          "type" : "string",
          "description" : "Google analytics utm_campaign value"
        },
        "linkParams" : {
          "type" : "array",
          "description" : "Parameters to append to each URL in html contents",
          "items" : {
            "$ref" : "#/definitions/LinkParam"
          }
        },
        "dataFeedId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "[Deprecated - use dataFeedIds instead] Id for data feed used in template rendering"
        },
        "dataFeedIds" : {
          "type" : "array",
          "description" : "Ids for data feeds used in template rendering",
          "items" : {
            "type" : "number"
          }
        },
        "cacheDataFeed" : {
          "type" : "object",
          "description" : "Cache data feed lookups for 1 hour"
        },
        "mergeDataFeedContext" : {
          "type" : "boolean",
          "description" : "Merge data feed contents into user context, so fields be referenced by {{field}} instead of [[field]]"
        },
        "locale" : {
          "type" : "string",
          "description" : "The locale for the content in this request. Iterable will automatically pick the content with locale that matches a 'locale' field in the user profile."
        },
        "messageTypeId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Message Type Id"
        },
        "creatorUserId" : {
          "type" : "string",
          "description" : "Specify a specific creator user id (email). The email must be an existing member of the project. Defaults to the organization creator."
        },
        "messageMedium" : {
          "$ref" : "#/definitions/MessageMedium"
        }
      }
    },
    "ApiPushTemplateModel" : {
      "type" : "object",
      "required" : [ "templateId" ],
      "properties" : {
        "templateId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Push template ID"
        },
        "createdAt" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date created [Read only]"
        },
        "updatedAt" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date last updated [Read only]"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the template"
        },
        "title" : {
          "type" : "string",
          "description" : "Push message title"
        },
        "message" : {
          "type" : "string",
          "description" : "Push message"
        },
        "payload" : {
          "type" : "object",
          "description" : "Payload to send with push notification"
        },
        "badge" : {
          "type" : "string",
          "description" : "Badge to set for push notification"
        },
        "locale" : {
          "type" : "string",
          "description" : "The locale for the content in this request. Leave empty for default locale. Iterable will automatically send the content with locale that matches a 'locale' field in the user profile."
        },
        "messageTypeId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Message Type Id"
        },
        "sound" : {
          "type" : "string",
          "description" : "Sound"
        },
        "deeplink" : {
          "description" : "Deep Link. A mapping that accepts two optional properties: 'ios' & 'android' and their respective deep link values.",
          "$ref" : "#/definitions/DeeplinkURI"
        },
        "clientTemplateId" : {
          "type" : "string",
          "description" : "Client template Id. Used as a secondary key to reference the template"
        },
        "campaignId" : {
          "type" : "object",
          "description" : "Campaign ID"
        }
      }
    },
    "DeeplinkURI" : {
      "type" : "object",
      "properties" : {
        "ios" : {
          "type" : "string"
        },
        "android" : {
          "type" : "string"
        }
      }
    },
    "UpsertPushTemplateModel" : {
      "type" : "object",
      "required" : [ "clientTemplateId", "messageMedium" ],
      "properties" : {
        "clientTemplateId" : {
          "type" : "string",
          "description" : "Id used by the client to identify a template. If multiple templates exist with the Id, all will be updated"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the template"
        },
        "title" : {
          "type" : "string",
          "description" : "Push message title"
        },
        "message" : {
          "type" : "string",
          "description" : "Push message"
        },
        "payload" : {
          "description" : "Payload to send with push notification",
          "$ref" : "#/definitions/JsObject"
        },
        "badge" : {
          "type" : "string",
          "description" : "Badge to set for push notification"
        },
        "locale" : {
          "type" : "string",
          "description" : "The locale for the content in this request. Leave empty for default locale.Iterable will automatically send the content with locale that matches a 'locale' field in the user profile."
        },
        "messageTypeId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Message Type Id"
        },
        "sound" : {
          "type" : "string",
          "description" : "Sound"
        },
        "deeplink" : {
          "description" : "Deep Link. A mapping that accepts two optional properties: 'ios' & 'android' and their respective deep link values.",
          "$ref" : "#/definitions/DeeplinkURI"
        },
        "creatorUserId" : {
          "type" : "string",
          "description" : "Specify a specific creator user id (email). The email must be an existing member of the project. Defaults to the organization creator."
        },
        "messageMedium" : {
          "$ref" : "#/definitions/MessageMedium"
        }
      }
    },
    "ApiSMSTemplateModel" : {
      "type" : "object",
      "required" : [ "templateId" ],
      "properties" : {
        "templateId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "SMS template ID"
        },
        "createdAt" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date created [Read only]"
        },
        "updatedAt" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date last updated [Read only]"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the template"
        },
        "message" : {
          "type" : "string",
          "description" : "SMS message"
        },
        "locale" : {
          "type" : "string",
          "description" : "The locale for the content in this request. Leave empty for default locale. Iterable will automatically send the content with locale that matches a 'locale' field in the user profile."
        },
        "messageTypeId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Message Type Id"
        },
        "imageUrl" : {
          "type" : "string",
          "description" : "Image Url"
        },
        "clientTemplateId" : {
          "type" : "string",
          "description" : "Client template Id. Used as a secondary key to reference the template"
        },
        "campaignId" : {
          "type" : "object",
          "description" : "Campaign ID"
        },
        "trackingDomain" : {
          "type" : "string",
          "description" : "Tracking Domain"
        },
        "googleAnalyticsCampaignName" : {
          "type" : "string",
          "description" : "Google analytics utm_campaign value"
        },
        "linkParams" : {
          "type" : "array",
          "description" : "Parameters to append to each URL in contents",
          "items" : {
            "$ref" : "#/definitions/LinkParam"
          }
        }
      }
    },
    "UpsertSMSTemplateModel" : {
      "type" : "object",
      "required" : [ "clientTemplateId", "messageMedium" ],
      "properties" : {
        "clientTemplateId" : {
          "type" : "string",
          "description" : "Id used by the client to identify a template. If multiple templates exist with the Id, all will be updated"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the template"
        },
        "message" : {
          "type" : "string",
          "description" : "SMS message"
        },
        "locale" : {
          "type" : "string",
          "description" : "The locale for the content in this request. Leave empty for default locale. Iterable will automatically send the content with locale that matches a 'locale' field in the user profile."
        },
        "messageTypeId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Message Type Id"
        },
        "imageUrl" : {
          "type" : "string",
          "description" : "Image Url"
        },
        "creatorUserId" : {
          "type" : "string",
          "description" : "Specify a specific creator user id (email). The email must be an existing member of the project. Defaults to the organization creator."
        },
        "googleAnalyticsCampaignName" : {
          "type" : "string",
          "description" : "Google analytics utm_campaign value"
        },
        "linkParams" : {
          "type" : "array",
          "description" : "Parameters to append to each URL in html contents",
          "items" : {
            "$ref" : "#/definitions/LinkParam"
          }
        },
        "messageMedium" : {
          "$ref" : "#/definitions/MessageMedium"
        }
      }
    },
    "ApiInAppTemplateModel" : {
      "type" : "object",
      "required" : [ "templateId" ],
      "properties" : {
        "templateId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "In-app template ID"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the template"
        },
        "html" : {
          "type" : "string",
          "description" : "Html of the in-app notification"
        },
        "inAppDisplaySettings" : {
          "description" : "Display settings",
          "$ref" : "#/definitions/InAppDisplaySettings"
        },
        "webInAppDisplaySettings" : {
          "description" : "Web In-app Display settings",
          "$ref" : "#/definitions/WebInAppDisplaySettings"
        },
        "payload" : {
          "type" : "object",
          "description" : "Payload"
        },
        "expirationDateTime" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The in-app message's absolute expiration time. If set to a time before the campaign sends, contacts will never see the message. Format is <code>YYYY-MM-DD HH:MM:SS</code> (UTC timestamp; time zones not allowed). If the request doesn't specify <code>expirationDateTime</code> or <code>expirationDuration</code>, the default expiration is 90 days after send time."
        },
        "expirationDuration" : {
          "type" : "string",
          "description" : "The in-app message's expiration time, relative to its send time. Should be an expression such as <code>now+90d</code>. For more information, read <a href=\"https://support.iterable.com/hc/en-us/articles/360034903151#_3-configure-the-in-app-template-tab\">this guide</a>. If the request doesn't specify <code>expirationDateTime</code> or <code>expirationDuration</code>, the default expiration is 90 days after send time."
        },
        "locale" : {
          "type" : "string",
          "description" : "The locale for the content in this request. Leave empty for default locale. Iterable will automatically send the content with locale that matches a 'locale' field in the user profile."
        },
        "clientTemplateId" : {
          "type" : "string",
          "description" : "Client template Id. Used as a secondary key to reference the template"
        },
        "messageTypeId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Message Type Id"
        },
        "campaignId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Campaign ID"
        }
      }
    },
    "BgColor" : {
      "type" : "object",
      "properties" : {
        "alpha" : {
          "type" : "number",
          "description" : "The opacity range of the background between 0-1"
        },
        "hex" : {
          "type" : "string",
          "description" : "The hex color of the background. Format: #FFFFFF"
        }
      }
    },
    "InAppDisplaySetting" : {
      "type" : "object"
    },
    "InAppDisplaySettings" : {
      "type" : "object",
      "properties" : {
        "top" : {
          "description" : "Padding percentage for the top of the notification, or -1 to autoexpand",
          "$ref" : "#/definitions/InAppDisplaySetting"
        },
        "right" : {
          "description" : "Padding percentage for the right of the notification, or -1 to autoexpand",
          "$ref" : "#/definitions/InAppDisplaySetting"
        },
        "bottom" : {
          "description" : "Padding percentage for the bottom of the notification, or -1 to autoexpand",
          "$ref" : "#/definitions/InAppDisplaySetting"
        },
        "left" : {
          "description" : "Padding percentage for the left of the notification, or -1 to autoexpand",
          "$ref" : "#/definitions/InAppDisplaySetting"
        },
        "bgColor" : {
          "description" : "The background color values",
          "$ref" : "#/definitions/BgColor"
        },
        "shouldAnimate" : {
          "type" : "boolean",
          "description" : "Enables In App Animations"
        }
      }
    },
    "PositionOption" : {
      "type" : "object"
    },
    "WebInAppDisplaySettings" : {
      "type" : "object",
      "properties" : {
        "position" : {
          "description" : "The position of the message on the screen",
          "$ref" : "#/definitions/PositionOption"
        }
      }
    },
    "UpsertInAppTemplateModel" : {
      "type" : "object",
      "required" : [ "clientTemplateId", "messageMedium" ],
      "properties" : {
        "clientTemplateId" : {
          "type" : "string",
          "description" : "Id used by the client to identify a template. If multiple templates exist with the Id, all will be updated"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the template"
        },
        "html" : {
          "type" : "string",
          "description" : "Html of the in-app notification"
        },
        "inAppDisplaySettings" : {
          "description" : "Display settings",
          "$ref" : "#/definitions/InAppDisplaySettings"
        },
        "webInAppDisplaySettings" : {
          "description" : "Web In-app display settings",
          "$ref" : "#/definitions/WebInAppDisplaySettings"
        },
        "payload" : {
          "description" : "Payload",
          "$ref" : "#/definitions/JsObject"
        },
        "expirationDateTime" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Absolute expiration of message"
        },
        "expirationDuration" : {
          "type" : "string",
          "description" : "Relative expiration of message"
        },
        "locale" : {
          "type" : "string",
          "description" : "The locale for the content in this request. Leave empty for default locale. Iterable will automatically send the content with locale that matches a 'locale' field in the user profile."
        },
        "messageTypeId" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Message Type Id"
        },
        "creatorUserId" : {
          "type" : "string",
          "description" : "Specify a specific creator user id (email). The email must be an existing member of the project. Defaults to the organization creator."
        },
        "messageMedium" : {
          "$ref" : "#/definitions/MessageMedium"
        }
      }
    },
    "GetTemplatesResponse" : {
      "type" : "object",
      "required" : [ "templates" ],
      "properties" : {
        "templates" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiTemplateResponse"
          }
        }
      }
    },
    "InvalidateJwtRequest" : {
      "type" : "object",
      "properties" : {
        "email" : {
          "type" : "string",
          "description" : "Either email or userId must be passed in to identify the user. If both are passed in, email takes precedence."
        },
        "userId" : {
          "type" : "string",
          "description" : "Optional userId, typically your database generated id. Either email or userId must be specified."
        },
        "issuedBefore" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Timestamp to invalidate JWTs before as epoch time in milliseconds. Defaults to the current time."
        }
      }
    },
    "GetForgottenUserEmailsResponse" : {
      "type" : "object",
      "required" : [ "hashedEmails" ],
      "properties" : {
        "hashedEmails" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "UserRequest" : {
      "type" : "object",
      "required" : [ "email" ],
      "properties" : {
        "email" : {
          "type" : "string"
        }
      }
    },
    "ApiInAppMessage" : {
      "type" : "object",
      "required" : [ "typeOfContent" ],
      "properties" : {
        "messageId" : {
          "type" : "string",
          "description" : "Iterable-generated Message ID"
        },
        "campaignId" : {
          "type" : "number",
          "description" : "Campaign ID"
        },
        "createdAt" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Time the In-app message was created"
        },
        "expiresAt" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Time the in-app message will expire"
        },
        "content" : {
          "description" : "The content for the in-app message",
          "$ref" : "#/definitions/InAppContentApi"
        },
        "customPayload" : {
          "type" : "object",
          "description" : "The custom payload for the in-app message"
        },
        "trigger" : {
          "description" : "The trigger type for the in-app message",
          "$ref" : "#/definitions/InAppTrigger"
        },
        "saveToInbox" : {
          "type" : "boolean",
          "description" : "Whether or not the message associated with the event was configured to use the inbox"
        },
        "inboxMetadata" : {
          "description" : "An object containing inbox metadata associated with this in-app message",
          "$ref" : "#/definitions/InboxMetadata"
        },
        "priorityLevel" : {
          "type" : "number",
          "description" : "The priority value of the in-app message"
        },
        "read" : {
          "type" : "boolean",
          "description" : "Whether or not the message was read by user"
        },
        "typeOfContent" : {
          "$ref" : "#/definitions/InAppTypeOfContent"
        }
      }
    },
    "ApiInAppMessagesResponse" : {
      "type" : "object",
      "required" : [ "inAppMessages" ],
      "properties" : {
        "inAppMessages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiInAppMessage"
          }
        }
      }
    },
    "InAppContentApi" : {
      "type" : "object",
      "required" : [ "webInAppDisplaySettings" ],
      "properties" : {
        "html" : {
          "type" : "string",
          "description" : "The html to be displayed"
        },
        "inAppDisplaySettings" : {
          "description" : "The in-app message display settings",
          "$ref" : "#/definitions/InAppDisplaySettings"
        },
        "webInAppDisplaySettings" : {
          "$ref" : "#/definitions/WebInAppDisplaySettings"
        }
      }
    },
    "InAppTrigger" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "description" : "How the in-app message was triggered",
          "$ref" : "#/definitions/Value"
        }
      }
    },
    "InAppTypeOfContent" : {
      "type" : "object"
    },
    "InboxMetadata" : {
      "type" : "object",
      "properties" : {
        "title" : {
          "type" : "string",
          "description" : "The title to display in the inbox"
        },
        "subtitle" : {
          "type" : "string",
          "description" : "The subtitle to display in the inbox"
        },
        "icon" : {
          "type" : "string",
          "description" : "The icon to display in the inbox"
        }
      }
    },
    "Value" : {
      "type" : "object"
    },
    "ChannelDetails" : {
      "type" : "object",
      "required" : [ "channelType", "id", "messageMedium", "name" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string"
        },
        "channelType" : {
          "type" : "string",
          "description" : "Channel type",
          "enum" : [ "Marketing", "Transactional" ]
        },
        "messageMedium" : {
          "type" : "string",
          "description" : "Medium of this channel",
          "enum" : [ "Email", "Push", "SMS" ]
        }
      }
    },
    "ChannelsResponse" : {
      "type" : "object",
      "required" : [ "channels" ],
      "properties" : {
        "channels" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ChannelDetails"
          }
        }
      }
    },
    "TargetInAppRequest" : {
      "type" : "object",
      "required" : [ "campaignId" ],
      "properties" : {
        "campaignId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Campaign ID"
        },
        "recipientEmail" : {
          "type" : "string",
          "description" : "Either email or userId must be passed in to identify the user. If both are passed in, email takes precedence."
        },
        "recipientUserId" : {
          "type" : "string",
          "description" : "UserId that was passed into the updateUser call"
        },
        "dataFields" : {
          "type" : "object",
          "description" : "Fields to merge into email template"
        },
        "sendAt" : {
          "type" : "string",
          "description" : "Schedule the message for up to 365 days in the future. If set in the past, message is sent immediately. Format is YYYY-MM-DD HH:MM:SS in UTC"
        },
        "allowRepeatMarketingSends" : {
          "type" : "boolean",
          "description" : "Allow repeat marketing sends? Defaults to true."
        }
      }
    },
    "MetadataWithProperties" : {
      "type" : "object",
      "required" : [ "key", "lastModified", "size", "table", "value" ],
      "properties" : {
        "table" : {
          "type" : "string"
        },
        "key" : {
          "type" : "string"
        },
        "size" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastModified" : {
          "type" : "integer",
          "format" : "int64"
        },
        "value" : {
          "type" : "object"
        }
      }
    },
    "PutMetadataRequest" : {
      "type" : "object",
      "required" : [ "value" ],
      "properties" : {
        "value" : {
          "type" : "object",
          "description" : "The JSON metadata value.  Max size is is 30kb."
        }
      }
    },
    "Listing" : {
      "type" : "object",
      "required" : [ "results" ],
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MetadataProperties"
          }
        },
        "nextMarker" : {
          "type" : "string"
        }
      }
    },
    "MetadataProperties" : {
      "type" : "object",
      "required" : [ "key", "lastModified", "size", "table" ],
      "properties" : {
        "table" : {
          "type" : "string"
        },
        "key" : {
          "type" : "string"
        },
        "size" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastModified" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ListMetadataTablesResponse" : {
      "type" : "object",
      "required" : [ "results" ],
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Table"
          }
        }
      }
    },
    "Table" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string"
        }
      }
    },
    "ApiUser" : {
      "type" : "object",
      "required" : [ "email" ],
      "properties" : {
        "email" : {
          "type" : "string"
        },
        "dataFields" : {
          "type" : "object"
        },
        "userId" : {
          "type" : "string"
        },
        "mergeNestedObjects" : {
          "type" : "object"
        },
        "mergeArrayKeys" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "correlationId" : {
          "type" : "string"
        }
      }
    },
    "UserResponse" : {
      "type" : "object",
      "properties" : {
        "user" : {
          "$ref" : "#/definitions/ApiUser"
        }
      }
    },
    "BulkUpdateUsersRequest" : {
      "type" : "object",
      "required" : [ "users" ],
      "properties" : {
        "users" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OptionalApiUser"
          }
        }
      }
    },
    "UpdateSubscriptionsRequest" : {
      "type" : "object",
      "properties" : {
        "email" : {
          "type" : "string"
        },
        "userId" : {
          "type" : "string"
        },
        "emailListIds" : {
          "type" : "array",
          "description" : "Lists that a user is subscribed to",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "unsubscribedChannelIds" : {
          "type" : "array",
          "description" : "Email channel ids to unsubscribe from",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "unsubscribedMessageTypeIds" : {
          "type" : "array",
          "description" : "Individual message type IDs to unsubscribe (does not impact channel subscriptions).",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "subscribedMessageTypeIds" : {
          "type" : "array",
          "description" : "Individual message type IDs to subscribe (does not impact channel subscriptions). To set a value for this field, first have your CSM enable the opt-in message types feature. Otherwise, attempting to set this field causes an error.",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "campaignId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Campaign to attribute unsubscribes"
        },
        "templateId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Template to attribute unsubscribes"
        }
      }
    },
    "BulkUpdateSubscriptionsResponse" : {
      "type" : "object",
      "required" : [ "failCount", "invalidEmails", "invalidUserIds", "successCount", "validEmailFailures", "validUserIdFailures" ],
      "properties" : {
        "successCount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Number of users successfully updated"
        },
        "failCount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Number of users that weren't updated (due to invalid email or internal error)"
        },
        "invalidEmails" : {
          "type" : "array",
          "description" : "A list of emails that weren't updated because they are invalid",
          "items" : {
            "type" : "string"
          }
        },
        "invalidUserIds" : {
          "type" : "array",
          "description" : "A list of userIds that weren't updated because they are invalid",
          "items" : {
            "type" : "string"
          }
        },
        "validEmailFailures" : {
          "type" : "array",
          "description" : "A list of emails that weren't updated due to internal error",
          "items" : {
            "type" : "string"
          }
        },
        "validUserIdFailures" : {
          "type" : "array",
          "description" : "A list of userIds that weren't updated due to internal error",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "BulkUpdateSubscriptionsRequest" : {
      "type" : "object",
      "required" : [ "updateSubscriptionsRequests" ],
      "properties" : {
        "updateSubscriptionsRequests" : {
          "type" : "array",
          "description" : "List of UpdateSubscriptionsRequests to process",
          "items" : {
            "$ref" : "#/definitions/UpdateSubscriptionsRequest"
          }
        }
      }
    },
    "UpdateEmailRequest" : {
      "type" : "object",
      "required" : [ "newEmail" ],
      "properties" : {
        "currentEmail" : {
          "type" : "string",
          "description" : "Either email or userId must be passed in to identify the user. If both are passed in, email takes precedence."
        },
        "currentUserId" : {
          "type" : "string",
          "description" : "Optional userId. Either email or userId must be specified."
        },
        "newEmail" : {
          "type" : "string"
        }
      }
    },
    "GetUserFieldsResponse" : {
      "type" : "object",
      "required" : [ "fields" ],
      "properties" : {
        "fields" : {
          "type" : "object"
        }
      }
    },
    "Device" : {
      "type" : "object",
      "required" : [ "applicationName", "platform", "token" ],
      "properties" : {
        "token" : {
          "type" : "string"
        },
        "platform" : {
          "type" : "string",
          "description" : "The device platform",
          "enum" : [ "APNS", "APNS_SANDBOX", "GCM" ]
        },
        "applicationName" : {
          "type" : "string",
          "description" : "The Iterable push integration to associate with the device token. Usually matches the package name (or bundle ID) of the relevant mobile app. To check, navigate to <strong>Settings > Mobile Apps</strong>, open the mobile app, look at the <strong>Push</strong> section and find the <strong>Name</strong> column for the relevant push integration."
        },
        "dataFields" : {
          "type" : "object"
        }
      }
    },
    "RegisterDeviceTokenRequest" : {
      "type" : "object",
      "required" : [ "device" ],
      "properties" : {
        "email" : {
          "type" : "string",
          "description" : "Either email or userId must be passed in to identify the user. If both are passed in, email takes precedence."
        },
        "device" : {
          "$ref" : "#/definitions/Device"
        },
        "userId" : {
          "type" : "string",
          "description" : "Register device for a user with specified userId. Either email or userId must be specified."
        },
        "preferUserId" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Create a new user with the specified userId if the user does not exist yet."
        }
      }
    },
    "RegisterBrowserTokenRequest" : {
      "type" : "object",
      "required" : [ "browserToken" ],
      "properties" : {
        "email" : {
          "type" : "string",
          "description" : "An email must be set unless a profile already exists with a userId set. In which case, a lookup from userId to email is performed."
        },
        "browserToken" : {
          "type" : "string",
          "description" : "This is provided by Firebase Messaging javascript API."
        },
        "userId" : {
          "type" : "string",
          "description" : "Optional userId, typically your database generated id. Can be used in events/track api."
        }
      }
    },
    "DisableDeviceRequest" : {
      "type" : "object",
      "required" : [ "token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "description" : "The device token"
        },
        "email" : {
          "type" : "string",
          "description" : "Specific email this device belongs to disable. Will disable device under all users with this device by default."
        },
        "userId" : {
          "type" : "string",
          "description" : "Specific userId this device belongs to disable. Will disable device under all users with this device by default."
        }
      }
    },
    "GetSentMessagesResponse" : {
      "type" : "object",
      "required" : [ "messages" ],
      "properties" : {
        "messages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SentMessage"
          }
        }
      }
    },
    "SentMessage" : {
      "type" : "object",
      "required" : [ "campaignId", "createdAt", "messageId", "templateId" ],
      "properties" : {
        "messageId" : {
          "type" : "string"
        },
        "campaignId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "templateId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "createdAt" : {
          "type" : "string"
        }
      }
    },
    "TargetWebPushRequest" : {
      "type" : "object",
      "required" : [ "campaignId" ],
      "properties" : {
        "campaignId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "recipientEmail" : {
          "type" : "string"
        },
        "recipientUserId" : {
          "type" : "string"
        },
        "dataFields" : {
          "type" : "object",
          "description" : "Fields to merge into template"
        },
        "sendAt" : {
          "type" : "string",
          "description" : "Schedule the message for up to 365 days in the future. If set in the past, message is sent immediately. Format is YYYY-MM-DD HH:MM:SS in UTC"
        },
        "allowRepeatMarketingSends" : {
          "type" : "boolean",
          "description" : "Allow repeat marketing sends? Defaults to true."
        }
      }
    }
  }
}